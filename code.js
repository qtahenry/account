function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('‚ö° K·∫ø to√°n Pro');
  
  // ƒê√£ l∆∞·ª£c b·ªè: menu.addItem('üì¶ T·∫°o Nh·∫≠p Xu·∫•t T·ªìn', 'taoNhapXuatTon');
  menu.addItem('üöÄ B·∫£ng ƒêi·ªÅu Khi·ªÉn T·ªïng H·ª£p', 'moSidebarUnified');
  menu.addSeparator();
  
  // Menu con ƒë·∫ßy ƒë·ªß cho ch·ª©c nƒÉng T√≠nh gi√° xu·∫•t kho
  const tinhGiaMenu = ui.createMenu('‚öôÔ∏è T√≠nh gi√° Xu·∫•t kho');
  tinhGiaMenu.addItem('B√¨nh qu√¢n Gia quy·ªÅn Theo Th√°ng', 'runBQGQ_Thang');
  tinhGiaMenu.addItem('B√¨nh qu√¢n Di ƒë·ªông', 'runBQDD');
  tinhGiaMenu.addItem('Nh·∫≠p tr∆∞·ªõc, Xu·∫•t tr∆∞·ªõc (FIFO)', 'runFIFO');
  tinhGiaMenu.addItem('Nh·∫≠p sau, Xu·∫•t tr∆∞·ªõc (LIFO)', 'runLIFO');
  
  menu.addSubMenu(tinhGiaMenu);
  menu.addSeparator();
  
  // Ghi ch√∫: Ch·ª©c nƒÉng h√†ng h√≥a ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o B·∫£ng ƒêi·ªÅu Khi·ªÉn T·ªïng H·ª£p
  // menu.addItem('üì¶ Ch·ªçn H√†ng h√≥a', 'moSidebarHangHoa');
  
  menu.addToUi();
}

// C√°c h√†m nh·ªè ƒë·ªÉ g·ªçi h√†m ch√≠nh v·ªõi ƒë√∫ng tham s·ªë
function runBQGQ_Thang() {
  tinhGiaXuatKho('BQGQ_THANG');
}
function runBQDD() {
  tinhGiaXuatKho('BQDD');
}
function runFIFO() {
  tinhGiaXuatKho('FIFO');
}
function runLIFO() {
  tinhGiaXuatKho('LIFO');
}

/**
 * H√ÄM PH·ª§: T·∫°o Map lookup th√¥ng tin h√†ng h√≥a t·ª´ sheet DMHH
 * S·ª≠ d·ª•ng cache ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
 */
function getHangHoaLookupMap() {
  try {
    const cache = CacheService.getScriptCache();
    const CACHE_KEY = 'HANGHOA_LOOKUP_MAP';
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    const cachedData = cache.get(CACHE_KEY);
    if (cachedData != null) {
      console.log('‚úÖ Loaded hangHoaMap from CACHE');
      return new Map(JSON.parse(cachedData));
    }
    
    // Cache miss - ƒë·ªçc t·ª´ sheet DMHH
    console.log('‚ö†Ô∏è Cache miss. Reading products from Sheet "DMHH" for auto-fill...');
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetDMHH = ss.getSheetByName('DMHH');
    
    if (!sheetDMHH) {
      throw new Error('Kh√¥ng t√¨m th·∫•y sheet "DMHH"');
    }
    
    const data = sheetDMHH.getDataRange().getValues();
    const hangHoaMap = new Map();
    
    // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 ƒë·ªÉ b·ªè qua ti√™u ƒë·ªÅ
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const maKho = row[0]?.toString().trim();
      const maHang = row[1]?.toString().trim();
      
      if (maKho && maHang) { // Ch·ªâ l·∫•y h√†ng h√≥a c√≥ ƒë·ªß m√£ kho v√† m√£ h√†ng
        const key = `${maKho}|${maHang}`;
        hangHoaMap.set(key, {
          tenHang: row[2]?.toString().trim() || '',
          quyCach: row[3]?.toString().trim() || '',
          dvt: row[4]?.toString().trim() || ''
        });
      }
    }
    
    // L∆∞u v√†o cache trong 15 ph√∫t (900 gi√¢y)
    const mapArray = Array.from(hangHoaMap.entries());
    cache.put(CACHE_KEY, JSON.stringify(mapArray), 300);
    
    console.log(`‚úÖ Loaded and cached ${hangHoaMap.size} products for auto-fill.`);
    return hangHoaMap;
    
  } catch (e) {
    console.error('‚ùå Error in getHangHoaLookupMap: ' + e.toString());
    return new Map(); // Tr·∫£ v·ªÅ Map r·ªóng n·∫øu c√≥ l·ªói
  }
}

function onEdit(e) {
  try {
    const range = e.range;
    const sheet = range.getSheet();
    const sheetName = sheet.getName();
    const startRow = range.getRow();
    const startCol = range.getColumn();
    const numRows = range.getNumRows();

    // --- T√ÅC V·ª§ 1: T·ª± ƒë·ªông ch·∫°y b√°o c√°o C√¢n ƒë·ªëi ph√°t sinh ---
    if (sheetName === 'CDPS' && numRows === 1 && ( (startRow === 1 && startCol === 12) || (startRow === 2 && startCol === 12) )) {
      SpreadsheetApp.getActiveSpreadsheet().toast('ƒêang t√≠nh to√°n l·∫°i C√¢n ƒë·ªëi ph√°t sinh...');
      Utilities.sleep(1000);
      taoCanDoiPhatSinh();
      return;
    }

    // --- T√ÅC V·ª§ 2: T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin h√†ng h√≥a (N√¢ng c·∫•p) ---
    // Ch·ªâ x·ª≠ l√Ω c√°c sheet c√≥ t√™n b·∫Øt ƒë·∫ßu b·∫±ng DL_
    if (!sheetName.startsWith('DL_') || startRow <= 1) return;

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // L·∫•y header row ƒë·ªÉ t√¨m v·ªã tr√≠ c√°c c·ªôt c·∫ßn thi·∫øt
    const headerRow = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const cleanHeaders = headerRow.map(h => h.toString().trim().toUpperCase());
    
    // T√¨m v·ªã tr√≠ c√°c c·ªôt c·∫ßn thi·∫øt
    const colIndexMaKho = cleanHeaders.indexOf('MA_KHO');
    const colIndexMaHang = cleanHeaders.indexOf('MA_HANG');
    const colIndexTenHang = cleanHeaders.indexOf('TEN_HANG');
    const colIndexQuyCach = cleanHeaders.indexOf('QUY_CACH');
    const colIndexDVT = cleanHeaders.indexOf('DVT');

    // Ki·ªÉm tra xem c√≥ ƒë·ªß c√°c c·ªôt c·∫ßn thi·∫øt kh√¥ng
    if (colIndexMaKho === -1 || colIndexMaHang === -1) {
      console.log(`‚ö†Ô∏è Sheet ${sheetName} kh√¥ng c√≥ c·ªôt MA_KHO ho·∫∑c MA_HANG`);
      return;
    }

    // Ki·ªÉm tra xem c√≥ √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ ƒëi·ªÅn kh√¥ng
    if (colIndexTenHang === -1 && colIndexQuyCach === -1 && colIndexDVT === -1) {
      console.log(`‚ö†Ô∏è Sheet ${sheetName} kh√¥ng c√≥ c·ªôt n√†o ƒë·ªÉ ƒëi·ªÅn (TEN_HANG, QUY_CACH, DVT)`);
      return;
    }

    // Ki·ªÉm tra xem v√πng ƒë∆∞·ª£c ch·ªânh s·ª≠a c√≥ li√™n quan ƒë·∫øn c·ªôt MA_KHO ho·∫∑c MA_HANG kh√¥ng
    const endCol = startCol + range.getNumColumns() - 1;
    const isRelevantColumnEdited = (endCol >= colIndexMaKho + 1 && startCol <= colIndexMaKho + 1) || 
                                   (endCol >= colIndexMaHang + 1 && startCol <= colIndexMaHang + 1);

    // N·∫øu kh√¥ng c√≥ s·ª± thay ƒë·ªïi n√†o ·ªü 2 c·ªôt n√†y -> tho√°t h√†m
    if (!isRelevantColumnEdited) {
      return;
    }

    // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
    ss.toast(`ƒêang x·ª≠ l√Ω ${numRows} d√≤ng...`, 'T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin h√†ng h√≥a', 5);
    
    // L·∫•y Map th√¥ng tin h√†ng h√≥a
    const hangHoaMap = getHangHoaLookupMap();
    if (hangHoaMap.size === 0) {
      ss.toast('Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ sheet DMHH', 'L·ªói', 10);
      return;
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ v√πng ƒë∆∞·ª£c ch·ªânh s·ª≠a
    const dataRange = sheet.getRange(startRow, 1, numRows, sheet.getLastColumn()).getValues();
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn
    const tenHangValues = [];
    const quyCachValues = [];
    const dvtValues = [];
    let filledCount = 0;

    // X·ª≠ l√Ω t·ª´ng d√≤ng
    for (let i = 0; i < numRows; i++) {
      const currentRow = dataRange[i];
      const maKho = currentRow[colIndexMaKho]?.toString().trim();
      const maHang = currentRow[colIndexMaHang]?.toString().trim();

      if (maKho && maHang) {
        const key = `${maKho}|${maHang}`;
        if (hangHoaMap.has(key)) {
          const itemInfo = hangHoaMap.get(key);
          tenHangValues.push([itemInfo.tenHang]);
          quyCachValues.push([itemInfo.quyCach]);
          dvtValues.push([itemInfo.dvt]);
          filledCount++;
          console.log(`‚úÖ T√¨m th·∫•y: ${maKho} - ${maHang} ‚Üí ${itemInfo.tenHang}`);
        } else {
          tenHangValues.push(['']);
          quyCachValues.push(['']);
          dvtValues.push(['']);
          console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: ${maKho} - ${maHang}`);
        }
      } else {
        tenHangValues.push(['']);
        quyCachValues.push(['']);
        dvtValues.push(['']);
      }
    }

    // ƒêi·ªÅn d·ªØ li·ªáu v√†o c√°c c·ªôt t∆∞∆°ng ·ª©ng
    if (colIndexTenHang > -1 && tenHangValues.length > 0) {
      sheet.getRange(startRow, colIndexTenHang + 1, numRows, 1).setValues(tenHangValues);
    }
    if (colIndexQuyCach > -1 && quyCachValues.length > 0) {
      sheet.getRange(startRow, colIndexQuyCach + 1, numRows, 1).setValues(quyCachValues);
    }
    if (colIndexDVT > -1 && dvtValues.length > 0) {
      sheet.getRange(startRow, colIndexDVT + 1, numRows, 1).setValues(dvtValues);
    }

    // Th√¥ng b√°o ho√†n th√†nh
    const message = `‚úÖ ƒê√£ t·ª± ƒë·ªông ƒëi·ªÅn ${filledCount}/${numRows} d√≤ng t·ª´ sheet DMHH`;
    ss.toast(message, 'Ho√†n th√†nh!', 5);
    console.log(message);

  } catch (error) {
    console.error('‚ùå L·ªñI TRONG H√ÄM ONEDIT: ' + error.toString());
    SpreadsheetApp.getActiveSpreadsheet().toast('G·∫∑p l·ªói khi t·ª± ƒë·ªông ƒëi·ªÅn, vui l√≤ng xem Logs.', 'L·ªói Script', 10);
  }
}

// ==================== UNIVERSAL DATA READER ====================

const REPORT_COLUMN_CONFIGS = {
  CDPS: {
    // ‚≠ê THAY ƒê·ªîI 1: ƒê√£ x√≥a 'TK_THUE' kh·ªèi danh s√°ch c·ªôt b·∫Øt bu·ªôc
    required: ['NGAY_HT', 'TK_NO', 'TK_CO', 'SO_TIEN', 'THUE_VAT'],
    mapping: {
      'NGAY_HT': 'ngay',
      'TK_NO': 'tkNo', 
      'TK_CO': 'tkCo',
      'SO_TIEN': 'soTien',
      'THUE_VAT': 'thueVAT',
      'TK_THUE': 'tkThue' // V·∫´n gi·ªØ mapping ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu n·∫øu c·ªôt t·ªìn t·∫°i
    }
  },
  NXT: {
    required: ['NGAY_HT', 'TK_NO', 'TK_CO', 'SO_TIEN', 'MA_KHO', 'MA_HANG', 'SO_LUONG', 'DON_GIA'],
    mapping: {
      'NGAY_HT': 'ngay',
      'TK_NO': 'tkNo', 
      'TK_CO': 'tkCo',
      'SO_TIEN': 'soTien',
      'MA_KHO': 'maKho',
      'MA_HANG': 'maHang',
      'SO_LUONG': 'soLuong',
      'DON_GIA': 'donGia'
    }
  },
  // ‚≠ê THAY ƒê·ªîI: Th√™m config m·ªõi cho Nh·∫≠t K√Ω Chung
  NKC: {
    required: ['NGAY_HT', 'TK_NO', 'TK_CO', 'SO_TIEN'],
    mapping: {
      'NGAY_HT': 'ngay',
      'SO_CT': 'soCt',
      'NGAY_CT': 'ngayCt',
      'DIEN_GIAI': 'dienGiai',
      'TK_NO': 'tkNo',
      'TK_CO': 'tkCo',
      'SO_TIEN': 'soTien',
      'THUE_VAT': 'thueVAT',
      'TK_THUE': 'tkThue'
    }
  },
  BC_BANHANG: {
    required: ['NGAY_HT', 'MA_KHO', 'MA_HANG', 'CO_SO', 'SO_LUONG', 'SO_TIEN'],
    mapping: {
      'NGAY_HT': 'ngay',
      'MA_KHO': 'maKho',
      'MA_HANG': 'maHang',
      'CO_SO': 'coSo',
      'SO_LUONG': 'soLuong',
      'SO_TIEN': 'soTien',
      // ‚≠ê THAY ƒê·ªîI: S·ª≠a l·∫°i t√™n thu·ªôc t√≠nh cho nh·∫•t qu√°n
      'THUE_VAT': 'thueVAT'
    }
  }
};
// H√ÄM ƒê·ªåC D·ªÆ LI·ªÜU UNIVERSAL
function getAllDataFromDLSheets(spreadsheet, reportType, filterCondition = null) {
  const config = REPORT_COLUMN_CONFIGS[reportType];
  if (!config) throw new Error(`Kh√¥ng t√¨m th·∫•y config cho lo·∫°i b√°o c√°o: ${reportType}`);
  
  const dataSheets = spreadsheet.getSheets().filter(sheet => sheet.getName().startsWith('DL_'));
  if (dataSheets.length === 0) throw new Error('Kh√¥ng t√¨m th·∫•y sheet n√†o b·∫Øt ƒë·∫ßu v·ªõi "DL_"');
  
  const combinedData = [];
  const processSummary = {
    totalSheets: dataSheets.length,
    validSheets: 0,
    totalRows: 0,
    errors: []
  };
  
  for (const sheet of dataSheets) {
    try {
      const sheetData = processUniversalDataSheet(sheet, config, filterCondition);
      if (sheetData.length > 0) {
        combinedData.push(...sheetData);
        processSummary.totalRows += sheetData.length;
        processSummary.validSheets++;
      }
    } catch (error) {
      processSummary.errors.push(`${sheet.getName()}: ${error.message}`);
      console.log(`‚ö†Ô∏è L·ªói sheet "${sheet.getName()}": ${error.message}`);
    }
  }
  
  console.log(`üìä T·ªïng k·∫øt ${reportType}: ${processSummary.validSheets}/${processSummary.totalSheets} sheets, ${processSummary.totalRows} d√≤ng`);
  return { data: combinedData, summary: processSummary };
}
// H√ÄM X·ª¨ L√ù UNIVERSAL CHO M·ªòT SHEET
function processUniversalDataSheet(sheet, config, filterCondition) {
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) return [];
  
  const headerRow = data[0];
  const columnMap = mapUniversalColumns(headerRow, config, sheet.getName());
  if (!columnMap.isValid) throw new Error(`Thi·∫øu c·ªôt: ${columnMap.missingColumns.join(', ')}`);
  
  const processedData = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const processedRow = { sheet: sheet.getName(), row: i + 1 };
    
    let hasValidData = false;
    for (const [headerName, propName] of Object.entries(config.mapping)) {
      const colIndex = columnMap[propName];
      let value = (colIndex !== undefined) ? row[colIndex] : undefined;
      
      if (['soTien', 'thueVAT', 'soLuong', 'donGia'].includes(propName)) {
        value = parseFloat(value) || 0;
      } else if (propName === 'ngay') {
        if (!value) continue;
        hasValidData = true;
      } else {
        value = value?.toString().trim() || '';
      }
      
      processedRow[propName] = value;
      if (propName !== 'ngay' && value) hasValidData = true;
    }
    
    if (!hasValidData) continue;
    if (filterCondition && !filterCondition(processedRow)) continue;
    
    processedData.push(processedRow);
  }
  
  return processedData;
}
// H√ÄM MAP C·ªòT UNIVERSAL
function mapUniversalColumns(headerRow, config, sheetName) {
  const columnMap = {};
  const missingColumns = [];
  
  const headerMap = {};
  headerRow.forEach((h, i) => {
    const headerName = h?.toString().trim().toUpperCase();
    if (headerName) headerMap[headerName] = i;
  });
  
  for (const [headerName, propName] of Object.entries(config.mapping)) {
    if (headerMap.hasOwnProperty(headerName)) {
      columnMap[propName] = headerMap[headerName];
    } else if (config.required.includes(headerName)) {
      missingColumns.push(headerName);
    }
  }
  
  return { ...columnMap, isValid: missingColumns.length === 0, missingColumns };
}
// H√ÄM T·∫†O SUMMARY UNIVERSAL
function createDataSummary(spreadsheet, reportType) {
  const dataSheets = spreadsheet.getSheets().filter(sheet => sheet.getName().startsWith('DL_'));
  const config = REPORT_COLUMN_CONFIGS[reportType];
  
  let summary = `- T√¨m th·∫•y ${dataSheets.length} sheet d·ªØ li·ªáu:\n`;
  let totalRows = 0;
  let validSheets = 0;
  
  for (const sheet of dataSheets) {
    try {
      const data = sheet.getDataRange().getValues();
      const rowCount = data.length - 1;
      
      if (rowCount > 0) {
        const headerRow = data[0];
        const columnMap = mapUniversalColumns(headerRow, config, sheet.getName());
        
        if (columnMap.isValid) {
          summary += `  ‚úÖ ${sheet.getName()}: ${rowCount} d√≤ng\n`;
          totalRows += rowCount;
          validSheets++;
        } else {
          summary += `  ‚ùå ${sheet.getName()}: Thi·∫øu c·ªôt ${columnMap.missingColumns.join(', ')}\n`;
        }
      } else {
        summary += `  ‚ö†Ô∏è ${sheet.getName()}: Tr·ªëng\n`;
      }
    } catch (error) {
      summary += `  ‚ùå ${sheet.getName()}: L·ªói ${error.message}\n`;
    }
  }
  
  summary += `- T·ªïng: ${validSheets}/${dataSheets.length} sheet h·ª£p l·ªá, ${totalRows} d√≤ng d·ªØ li·ªáu`;
  return summary;
}

// ==================== H√ÄM B√ÅO C√ÅO CH√çNH ====================

function taoCanDoiPhatSinh(ngayBatDau = null, ngayKetThuc = null) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  
  try {
    const sheetDMTK = ss.getSheetByName('DMTK');
    const sheetCDPS = ss.getSheetByName('CDPS');
    if (!sheetDMTK || !sheetCDPS) throw new Error('Kh√¥ng t√¨m th·∫•y sheet DMTK ho·∫∑c CDPS');
    
    let startDate, endDate;
    if (ngayBatDau && ngayKetThuc) {
      startDate = new Date(ngayBatDau);
      endDate = new Date(ngayKetThuc);
    } else {
      startDate = new Date(ss.getRangeByName('NgayBatDau_CDPS').getValue());
      endDate = new Date(ss.getRangeByName('NgayKetThuc_CDPS').getValue());
    }
    if (!startDate || !endDate) throw new Error('Vui l√≤ng nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c');
    
    const selectedAccounts = getSelectedAccounts();
    const isFiltered = selectedAccounts.length > 0;
    
    ss.toast('ƒêang ƒë·ªçc d·ªØ li·ªáu...', 'B∆∞·ªõc 1/4', -1);
    const dataResult = getAllDataFromDLSheets(ss, 'CDPS');
    const combinedData = dataResult.data;
    
    const taiKhoanMap = new Map();
    
    function xacDinhTinhChatTaiKhoan(maTK) {
      const kyTuDau = maTK.toString().charAt(0);
      if (['1', '2', '6', '8'].includes(kyTuDau)) return 'TAI_SAN_CHI_PHI';
      if (['3', '4', '5', '7'].includes(kyTuDau)) return 'NO_VON_DOANH_THU';
      return 'KHAC';
    }
    
    function tinhSoDuSauPhatSinh(duNoDauKy, duCoDauKy, phatSinhNo, phatSinhCo, tinhChatTK) {
      let soDuNoCuoi = 0, soDuCoCuoi = 0;
      if (tinhChatTK === 'TAI_SAN_CHI_PHI') {
        const soDuThuan = (duNoDauKy + phatSinhNo) - (duCoDauKy + phatSinhCo);
        if (soDuThuan >= 0) soDuNoCuoi = soDuThuan;
        else soDuCoCuoi = Math.abs(soDuThuan);
      } else { // NO_VON_DOANH_THU v√† KHAC
        const soDuThuan = (duCoDauKy + phatSinhCo) - (duNoDauKy + phatSinhNo);
        if (soDuThuan >= 0) soDuCoCuoi = soDuThuan;
        else soDuNoCuoi = Math.abs(soDuThuan);
      }
      return [soDuNoCuoi, soDuCoCuoi];
    }
    
    function xuLyVAT(tkNo, tkCo, tienVAT, tkThue) {
      if (!tienVAT || tienVAT <= 0 || !tkThue) return [];
      const tkThueStr = tkThue.toString().trim();
      if (['1331', '1332'].includes(tkThueStr)) return [{ tkNo: tkThueStr, tkCo, soTien: tienVAT }];
      if (['33311', '33312'].includes(tkThueStr)) return [{ tkNo, tkCo: tkThueStr, soTien: tienVAT }];
      return [];
    }
    
    function timTaiKhoanCha(maTK, capTaiKhoan) {
      const ma = maTK.toString().trim();
      const taiKhoanCha = [];
      if (capTaiKhoan === 3 && ma.length >= 4) {
        taiKhoanCha.push(ma.substring(0, 4));
        taiKhoanCha.push(ma.substring(0, 3));
      } else if (capTaiKhoan === 2 && ma.length >= 3) {
        taiKhoanCha.push(ma.substring(0, 3));
      }
      return taiKhoanCha;
    }
    
    function kiemTraTaiKhoanThuocFilter(maTK) {
      if (!isFiltered) return true;
      const ma = maTK.toString().trim();
      return selectedAccounts.some(selectedTK => ma.startsWith(selectedTK));
    }
    
    ss.toast('ƒêang ƒë·ªçc danh m·ª•c t√†i kho·∫£n...', 'B∆∞·ªõc 2/4', -1);
    const dataDMTK = sheetDMTK.getDataRange().getValues();
    for (let i = 1; i < dataDMTK.length; i++) {
      const row = dataDMTK[i];
      const maTK = row[0]?.toString().trim();
      if (maTK) {
        taiKhoanMap.set(maTK, {
          ten: row[1]?.toString().trim(),
          loai: parseInt(row[2]) || 0,
          duNoDauKyGoc: parseFloat(row[3]) || 0,
          duCoDauKyGoc: parseFloat(row[4]) || 0,
          phatSinhNoTruocKy: 0, phatSinhCoTruocKy: 0,
          phatSinhNoTrongKy: 0, phatSinhCoTrongKy: 0,
          tinhChat: xacDinhTinhChatTaiKhoan(maTK)
        });
      }
    }
    
    ss.toast('ƒêang x·ª≠ l√Ω d·ªØ li·ªáu ph√°t sinh...', 'B∆∞·ªõc 3/4', -1);
    
    for (const row of combinedData) {
      const ngayHachToan = new Date(row.ngay);
      const tkNo = row.tkNo?.toString().trim();
      const tkCo = row.tkCo?.toString().trim();
      
      // ‚≠ê THAY ƒê·ªîI 2: Logic x·ª≠ l√Ω ti·ªÅn h√†ng v√† ti·ªÅn thu·∫ø
      let tienHang = parseFloat(row.soTien) || 0;
      const tienVAT = parseFloat(row.thueVAT) || 0;
      const tkThue = row.tkThue?.toString().trim();

      // N·∫øu c√≥ ti·ªÅn thu·∫ø nh∆∞ng kh√¥ng c√≥ t√†i kho·∫£n thu·∫ø, c·ªông g·ªôp v√†o ti·ªÅn h√†ng
      if (tienVAT > 0 && !tkThue) {
        tienHang += tienVAT;
      }
      
      const laGiaoDichTruocKy = ngayHachToan < startDate;
      const laGiaoDichTrongKy = ngayHachToan >= startDate && ngayHachToan <= endDate;
      
      if (laGiaoDichTruocKy || laGiaoDichTrongKy) {
        const capNhatPhatSinh = (maTK, soTien, loai) => {
          if (!taiKhoanMap.has(maTK)) {
            taiKhoanMap.set(maTK, {
              ten: `T√†i kho·∫£n ${maTK}`, loai: maTK.length, duNoDauKyGoc: 0, duCoDauKyGoc: 0,
              phatSinhNoTruocKy: 0, phatSinhCoTruocKy: 0, phatSinhNoTrongKy: 0, phatSinhCoTrongKy: 0,
              tinhChat: xacDinhTinhChatTaiKhoan(maTK)
            });
          }
          const tk = taiKhoanMap.get(maTK);
          if (laGiaoDichTruocKy) {
            if (loai === 'NO') tk.phatSinhNoTruocKy += soTien; else tk.phatSinhCoTruocKy += soTien;
          } else {
            if (loai === 'NO') tk.phatSinhNoTrongKy += soTien; else tk.phatSinhCoTrongKy += soTien;
          }
        };
        
        if (tienHang > 0) {
          if (tkNo) capNhatPhatSinh(tkNo, tienHang, 'NO');
          if (tkCo) capNhatPhatSinh(tkCo, tienHang, 'CO');
        }
        
        if (tienVAT > 0 && tkThue) {
          const giaoDichVAT = xuLyVAT(tkNo, tkCo, tienVAT, tkThue);
          for (const vatGD of giaoDichVAT) {
            if (vatGD.tkNo) capNhatPhatSinh(vatGD.tkNo, vatGD.soTien, 'NO');
            if (vatGD.tkCo) capNhatPhatSinh(vatGD.tkCo, vatGD.soTien, 'CO');
          }
        }
      }
    }
    
    const sortedByLevel = Array.from(taiKhoanMap.entries()).sort((a, b) => b[1].loai - a[1].loai || a[0].localeCompare(b[0]));
    
    for (const [maTK, thongTin] of sortedByLevel) {
      const taiKhoanCha = timTaiKhoanCha(maTK, thongTin.loai);
      for (const maCha of taiKhoanCha) {
        if (taiKhoanMap.has(maCha)) {
          const thongTinCha = taiKhoanMap.get(maCha);
          thongTinCha.duNoDauKyGoc += thongTin.duNoDauKyGoc;
          thongTinCha.duCoDauKyGoc += thongTin.duCoDauKyGoc;
          thongTinCha.phatSinhNoTruocKy += thongTin.phatSinhNoTruocKy;
          thongTinCha.phatSinhCoTruocKy += thongTin.phatSinhCoTruocKy;
          thongTinCha.phatSinhNoTrongKy += thongTin.phatSinhNoTrongKy;
          thongTinCha.phatSinhCoTrongKy += thongTin.phatSinhCoTrongKy;
        }
      }
    }
    
    ss.toast('ƒêang t·∫°o b√°o c√°o...', 'B∆∞·ªõc 4/4', -1);
    
    const outputData = [];
    const finalSorted = Array.from(taiKhoanMap.entries()).sort((a, b) => a[0].localeCompare(b[0]));
    
    for (const [maTK, thongTin] of finalSorted) {
      const [duNoDauKy, duCoDauKy] = tinhSoDuSauPhatSinh(thongTin.duNoDauKyGoc, thongTin.duCoDauKyGoc, thongTin.phatSinhNoTruocKy, thongTin.phatSinhCoTruocKy, thongTin.tinhChat);
      const coPhatSinh = thongTin.phatSinhNoTrongKy !== 0 || thongTin.phatSinhCoTrongKy !== 0;
      const coSoDu = duNoDauKy !== 0 || duCoDauKy !== 0;

      if (kiemTraTaiKhoanThuocFilter(maTK) && (coPhatSinh || coSoDu)) {
        const [duNoCuoiKy, duCoCuoiKy] = tinhSoDuSauPhatSinh(duNoDauKy, duCoDauKy, thongTin.phatSinhNoTrongKy, thongTin.phatSinhCoTrongKy, thongTin.tinhChat);
        outputData.push([maTK, thongTin.ten, thongTin.loai, duNoDauKy, duCoDauKy, thongTin.phatSinhNoTrongKy, thongTin.phatSinhCoTrongKy, duNoCuoiKy, duCoCuoiKy]);
      }
    }
    
    const lastRow = sheetCDPS.getLastRow();
    if (lastRow >= 4) sheetCDPS.getRange(4, 1, lastRow - 3, 10).clear();
    
    if (outputData.length > 0) {
      sheetCDPS.getRange(5, 1, outputData.length, 9).setValues(outputData);
      sheetCDPS.getRange(5, 4, outputData.length, 6).setNumberFormat('#,##0');
      
      for (let i = 0; i < outputData.length; i++) {
        if (outputData[i][2] === 1) {
          sheetCDPS.getRange(5 + i, 1, 1, 10).setFontWeight('bold').setBackground('#E7E6E6');
        }
      }
    }

    ss.toast('‚úÖ Ho√†n th√†nh!', 'Th√†nh c√¥ng', 5);
    ui.alert(`‚úÖ B√°o c√°o C√¢n ƒë·ªëi Ph√°t sinh ƒë√£ ho√†n th√†nh cho k·ª≥ b√°o c√°o t·ª´ ${startDate.toLocaleDateString('vi-VN')} ƒë·∫øn ${endDate.toLocaleDateString('vi-VN')}.`);
  
  } catch (error) {
    console.error("L·ªñI T·∫†O B√ÅO C√ÅO CDPS: " + error.toString() + error.stack);
    ss.toast('‚ùå L·ªói: ' + error.toString(), 'L·ªói', 10);
    SpreadsheetApp.getUi().alert('‚ùå L·ªói khi t·∫°o b√°o c√°o C√¢n ƒë·ªëi Ph√°t sinh:\n\n' + error.toString());
  }
}

//--------------------------------------------------------------------------------------------

// ==================== C√ÅC H√ÄM KH√ÅC GI·ªÆ NGUY√äN ====================

function openAccountFilter() {
  const html = HtmlService.createTemplateFromFile('sidebarLocCDPS');
  html.accounts = getLevel1Accounts();
  html.selectedAccounts = getSelectedAccounts();
  
  const htmlOutput = html.evaluate()
    .setWidth(350)
    .setTitle('üè¶ L·ªçc T√†i kho·∫£n C·∫•p 1');
  
  SpreadsheetApp.getUi().showSidebar(htmlOutput);
}

function getLevel1Accounts() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetDMTK = ss.getSheetByName('DMTK');
  
  if (!sheetDMTK) return [];
  
  const data = sheetDMTK.getDataRange().getValues();
  const level1Accounts = [];
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const maTK = row[0]?.toString().trim();
    const tenTK = row[1]?.toString().trim();
    const loaiTK = parseInt(row[2]) || 0;
    
    if (maTK && loaiTK === 1) {
      level1Accounts.push({
        ma: maTK,
        ten: tenTK
      });
    }
  }
  
  return level1Accounts.sort((a, b) => a.ma.localeCompare(b.ma));
}

function getSelectedAccounts() {
  const selected = PropertiesService.getDocumentProperties().getProperty('selectedAccounts');
  return selected ? JSON.parse(selected) : [];
}

function saveSelectedAccounts(selectedAccounts) {
  PropertiesService.getDocumentProperties().setProperty('selectedAccounts', JSON.stringify(selectedAccounts));
  return true;
}

function clearAccountFilter() {
  PropertiesService.getDocumentProperties().deleteProperty('selectedAccounts');
  return true;
}


/**
 * H√ÄM PH·ª§: Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu ƒë·∫ßu v√†o
 */
function validateInputData(startDateStr, endDateStr, taiKhoanCanXem) {
  const errors = [];
  
  // Ki·ªÉm tra ng√†y
  if (!startDateStr || !endDateStr) {
    errors.push('Thi·∫øu tham s·ªë ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c');
  } else {
    const startDate = new Date(startDateStr);
    const endDate = new Date(endDateStr);
    
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      errors.push('ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá');
    } else if (startDate > endDate) {
      errors.push('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c');
    }
  }
  
  // Ki·ªÉm tra t√†i kho·∫£n
  if (!taiKhoanCanXem || !Array.isArray(taiKhoanCanXem) || taiKhoanCanXem.length === 0) {
    errors.push('Thi·∫øu danh s√°ch t√†i kho·∫£n c·∫ßn xem');
  } else {
    taiKhoanCanXem.forEach((tk, index) => {
      if (!tk || typeof tk !== 'string' || tk.trim() === '') {
        errors.push(`T√†i kho·∫£n th·ª© ${index + 1} kh√¥ng h·ª£p l·ªá`);
      }
    });
  }
  
  return errors;
}




/**
 * H√ÄM PH·ª§: X√¢y d·ª±ng c·∫•u tr√∫c ph√¢n c·∫•p t√†i kho·∫£n
 */
function buildAccountHierarchy(taiKhoanList) {
  const hierarchy = new Map();
  
  // Ph√¢n lo·∫°i t√†i kho·∫£n theo c·∫•p ƒë·ªô
  taiKhoanList.forEach(tk => {
    const level = determineAccountLevel(tk.ma, tk.loai);
    
    if (!hierarchy.has(level)) {
      hierarchy.set(level, []);
    }
    hierarchy.get(level).push(tk);
  });
  
  return hierarchy;
}

/**
 * H√ÄM PH·ª§: X√°c ƒë·ªãnh c·∫•p ƒë·ªô t√†i kho·∫£n
 */
function determineAccountLevel(maTK, loai) {
  // N·∫øu c√≥ c·ªôt LOAI, ∆∞u ti√™n s·ª≠ d·ª•ng
  if (loai && loai > 0) {
    return loai;
  }
  
  // T·ª± ƒë·ªông x√°c ƒë·ªãnh c·∫•p ƒë·ªô d·ª±a v√†o ƒë·ªô d√†i v√† pattern
  const length = maTK.length;
  
  if (length === 3) return 1;        // C·∫•p 1: 111, 112, 131
  if (length === 4) return 2;        // C·∫•p 2: 1111, 1112, 131KH
  if (length === 5) return 3;        // C·∫•p 3: 11111, 11121, 1111chinhanh
  if (length >= 6) return 4;         // C·∫•p 4+: 111111, 1111111...
  
  return 1; // M·∫∑c ƒë·ªãnh l√† c·∫•p 1
}



/**
 * H√ÄM PH·ª§: Ki·ªÉm tra xem m·ªôt t√†i kho·∫£n c√≥ ph·∫£i l√† con c·ªßa t√†i kho·∫£n cha kh√¥ng (bao g·ªìm t·∫•t c·∫£ c√°c c·∫•p)
 * S·ª¨A L·∫†I: T·ªïng h·ª£p t·∫•t c·∫£ c√°c c·∫•p con, kh√¥ng ch·ªâ con tr·ª±c ti·∫øp
 */
function isChildAccount(parentAccount, childAccount) {
  // T√†i kho·∫£n con ph·∫£i d√†i h∆°n t√†i kho·∫£n cha v√† b·∫Øt ƒë·∫ßu b·∫±ng m√£ c·ªßa cha
  return childAccount.length > parentAccount.length && childAccount.startsWith(parentAccount);
}

/**
 * H√ÄM PH·ª§: T√¨m t√†i kho·∫£n con s·ª≠ d·ª•ng index (S·ª¨A L·∫†I - T√åM T·∫§T C·∫¢ C√ÅC C·∫§P CON)
 */
function findChildAccountsOptimized(parentAccount, accountIndex) {
  const children = [];
  const parentPattern = parentAccount;
  
  // S·ª≠ d·ª•ng index ƒë·ªÉ t√¨m ki·∫øm nhanh
  if (accountIndex.has(parentPattern)) {
    const potentialChildren = accountIndex.get(parentPattern);
    
    potentialChildren.forEach(acc => {
      if (acc.ma !== parentAccount && isChildAccount(parentAccount, acc.ma)) {
        children.push(acc);
      }
    });
  }
  
  return children;
}



/**
 * H√ÄM PH·ª§: Ki·ªÉm tra xem m·ªôt t√†i kho·∫£n c√≥ thu·ªôc h·ªá th·ªëng t√†i kho·∫£n cha-con kh√¥ng
 */
function isAccountInHierarchy(accountCode, parentAccount, childAccounts) {
  if (accountCode === parentAccount) return true;
  return childAccounts.some(child => child.ma === accountCode);
}

/**
 * H√ÄM PH·ª§: T√≠nh s·ªë d∆∞ ƒë·∫ßu k·ª≥ ƒë·ªông cho t√†i kho·∫£n ƒë∆°n l·∫ª (KH√îNG c√≥ t√†i kho·∫£n con)
 * S·ª¨A L·∫†I: Ch·ªâ t√≠nh cho t√†i kho·∫£n ƒë∆∞·ª£c y√™u c·∫ßu, kh√¥ng t√≠nh tr√πng l·∫∑p
 */
function tinhSoDuDauKyDongChoTaiKhoanDonLe(taiKhoan, allTransactions, ngayBatDau, taiKhoanMap) {
  let duNo = 0;
  let duCo = 0;
  
  // 1. S·ªë d∆∞ g·ªëc c·ªßa t√†i kho·∫£n
  const tkInfo = taiKhoanMap.get(taiKhoan);
  if (tkInfo) {
    duNo += tkInfo.duNoGoc;
    duCo += tkInfo.duCoGoc;
  }
  
  // 2. C·ªông t·∫•t c·∫£ giao d·ªãch TR∆Ø·ªöC k·ª≥ b√°o c√°o (CH·ªà t√≠nh cho t√†i kho·∫£n n√†y)
  allTransactions.forEach(trans => {
    if (new Date(trans.NGAY_HT) < ngayBatDau) {
      // Giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n ƒë∆∞·ª£c y√™u c·∫ßu
      if (trans.TK_NO === taiKhoan) {
        duNo += trans.SO_TIEN; // TƒÉng d∆∞ n·ª£
      }
      if (trans.TK_CO === taiKhoan) {
        duCo += trans.SO_TIEN; // TƒÉng d∆∞ c√≥
      }
    }
  });
  
  // 3. T√≠nh s·ªë d∆∞ ƒë·ªông ƒë·∫ßu k·ª≥ theo t√≠nh ch·∫•t t√†i kho·∫£n
  return tinhSoDuDongDauKy(duNo, duCo);
}

/**
 * H√ÄM PH·ª§: T√≠nh s·ªë d∆∞ ƒë·∫ßu k·ª≥ ƒë·ªông cho t√†i kho·∫£n cha (bao g·ªìm T·∫§T C·∫¢ c√°c c·∫•p con)
 * S·ª¨A L·∫†I: T√≠nh t·∫•t c·∫£ c√°c c·∫•p con, kh√¥ng ch·ªâ con tr·ª±c ti·∫øp
 */
function tinhSoDuDauKyDongChoTaiKhoanCha(parentAccount, childAccounts, allTransactions, ngayBatDau, taiKhoanMap) {
  let duNo = 0;
  let duCo = 0;
  
  // 1. S·ªë d∆∞ g·ªëc c·ªßa t√†i kho·∫£n cha
  const parentInfo = taiKhoanMap.get(parentAccount);
  if (parentInfo) {
    duNo += parentInfo.duNoGoc;
    duCo += parentInfo.duCoGoc;
  }
  
  // 2. S·ªë d∆∞ g·ªëc c·ªßa T·∫§T C·∫¢ t√†i kho·∫£n con (m·ªçi c·∫•p)
  childAccounts.forEach(child => {
    const childInfo = taiKhoanMap.get(child.ma);
    if (childInfo) {
      duNo += childInfo.duNoGoc;
      duCo += childInfo.duCoGoc;
    }
  });
  
  // 3. C·ªông t·∫•t c·∫£ giao d·ªãch TR∆Ø·ªöC k·ª≥ b√°o c√°o (t√≠nh cho t√†i kho·∫£n cha v√† T·∫§T C·∫¢ con)
  allTransactions.forEach(trans => {
    if (new Date(trans.NGAY_HT) < ngayBatDau) {
      // Giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n cha
      if (trans.TK_NO === parentAccount) {
        duNo += trans.SO_TIEN; // TƒÉng d∆∞ n·ª£
      }
      if (trans.TK_CO === parentAccount) {
        duCo += trans.SO_TIEN; // TƒÉng d∆∞ c√≥
      }
      
      // Giao d·ªãch li√™n quan ƒë·∫øn T·∫§T C·∫¢ t√†i kho·∫£n con (m·ªçi c·∫•p)
      if (isChildAccount(parentAccount, trans.TK_NO)) {
        duNo += trans.SO_TIEN; // TƒÉng d∆∞ n·ª£
      }
      if (isChildAccount(parentAccount, trans.TK_CO)) {
        duCo += trans.SO_TIEN; // TƒÉng d∆∞ c√≥
      }
    }
  });
  
  // 4. T√≠nh s·ªë d∆∞ ƒë·ªông ƒë·∫ßu k·ª≥ theo t√≠nh ch·∫•t t√†i kho·∫£n
  return tinhSoDuDongDauKy(duNo, duCo);
}

/**
 * H√ÄM PH·ª§: T√≠nh s·ªë d∆∞ ƒë·∫ßu k·ª≥ ƒë·ªông cho t√†i kho·∫£n (S·ª¨A L·∫†I - G·ªåI ƒê√öNG FUNCTION)
 */
function tinhSoDuDauKyDongChoTaiKhoan(parentAccount, childAccounts, allTransactions, ngayBatDau, taiKhoanMap) {
  // N·∫øu c√≥ t√†i kho·∫£n con (m·ªçi c·∫•p) -> g·ªçi function t·ªïng h·ª£p
  if (childAccounts.length > 0) {
    return tinhSoDuDauKyDongChoTaiKhoanCha(parentAccount, childAccounts, allTransactions, ngayBatDau, taiKhoanMap);
  }
  
  // N·∫øu kh√¥ng c√≥ t√†i kho·∫£n con -> g·ªçi function ƒë∆°n l·∫ª
  return tinhSoDuDauKyDongChoTaiKhoanDonLe(parentAccount, allTransactions, ngayBatDau, taiKhoanMap);
}

/**
 * H√ÄM PH·ª§: T√≠nh s·ªë d∆∞ ƒë·ªông ƒë·∫ßu k·ª≥ theo t√≠nh ch·∫•t t√†i kho·∫£n k·∫ø to√°n
 * S·ª¨A L·∫†I: Logic t√≠nh to√°n ch√≠nh x√°c
 */
function tinhSoDuDongDauKy(duNo, duCo) {
  // N·∫øu c·∫£ d∆∞ n·ª£ v√† d∆∞ c√≥ ƒë·ªÅu = 0
  if (duNo === 0 && duCo === 0) {
    return [0, 0];
  }
  
  // N·∫øu ch·ªâ c√≥ d∆∞ n·ª£
  if (duNo > 0 && duCo === 0) {
    return [duNo, 0];
  }
  
  // N·∫øu ch·ªâ c√≥ d∆∞ c√≥
  if (duCo > 0 && duNo === 0) {
    return [0, duCo];
  }
  
  // N·∫øu c·∫£ d∆∞ n·ª£ v√† d∆∞ c√≥ ƒë·ªÅu > 0 (c√≥ ph√°t sinh tr√°i d·∫•u)
  if (duNo > 0 && duCo > 0) {
    if (duNo > duCo) {
      return [duNo - duCo, 0]; // D∆∞ n·ª£
    } else {
      return [0, duCo - duNo]; // D∆∞ c√≥
    }
  }
  
  // Tr∆∞·ªùng h·ª£p √¢m (kh√¥ng n√™n x·∫£y ra trong th·ª±c t·∫ø)
  if (duNo < 0) {
    return [0, Math.abs(duNo)];
  }
  if (duCo < 0) {
    return [Math.abs(duCo), 0];
  }
  
  return [0, 0];
}

/**
 * H√ÄM PH·ª§: X√°c ƒë·ªãnh t√≠nh ch·∫•t t√†i kho·∫£n k·∫ø to√°n
 */
function getAccountNature(maTK) {
  const firstDigit = maTK.charAt(0);
  
  // T√†i kho·∫£n d∆∞ n·ª£ (T√†i s·∫£n, Chi ph√≠)
  if (['1', '2', '6', '8'].includes(firstDigit)) {
    return 'NO'; // D∆∞ n·ª£
  }
  
  // T√†i kho·∫£n d∆∞ c√≥ (Ngu·ªìn v·ªën, Doanh thu)
  if (['3', '4', '5', '7'].includes(firstDigit)) {
    return 'CO'; // D∆∞ c√≥
  }
  
  // M·∫∑c ƒë·ªãnh
  return 'NO';
}

/**
 * H√ÄM PH·ª§: T√≠nh to√°n s·ªë d∆∞ cu·ªëi k·ª≥ v·ªõi x·ª≠ l√Ω giao d·ªãch n·ªôi b·ªô (S·ª¨A L·∫†I)
 */
function calculateFinalBalanceWithInternalHandling(parentAccount, childAccounts, duNoDauKy, duCoDauKy, transactionsInPeriod) {
  let duNoCuoiKy = duNoDauKy;
  let duCoCuoiKy = duCoDauKy;
  
  // X·ª≠ l√Ω giao d·ªãch n·ªôi b·ªô
  const filteredTransactions = handleInternalTransactions(transactionsInPeriod, parentAccount, childAccounts);
  
  filteredTransactions.forEach(trans => {
    const [phatSinhNo, phatSinhCo] = calculateAggregatedPhatSinh(trans, parentAccount, childAccounts);
    
    // C·∫≠p nh·∫≠t s·ªë d∆∞ cu·ªëi k·ª≥ (GI·ªÆ NGUY√äN LOGIC HI·ªÜN T·∫†I)
    let duNoMoi = duNoCuoiKy + phatSinhNo;
    let duCoMoi = duCoCuoiKy + phatSinhCo;
    [duNoCuoiKy, duCoCuoiKy] = tinhSoDu(duNoMoi, duCoMoi);
  });
  
  return [duNoCuoiKy, duCoCuoiKy];
}

/**
 * H√ÄM PH·ª§: T√≠nh to√°n ph√°t sinh t·ªïng h·ª£p t·ª´ t√†i kho·∫£n cha v√† con (S·ª¨A L·∫†I)
 */

function calculateAggregatedPhatSinh(trans, parentAccount, childAccounts) {
  const accounts = [parentAccount, ...childAccounts.map(c => c.ma)];
  const isInternalNo = accounts.includes(trans.TK_NO);
  const isInternalCo = accounts.includes(trans.TK_CO);

  let phatSinhNo = 0, phatSinhCo = 0;
  if (isInternalNo && !isInternalCo) phatSinhNo = trans.SO_TIEN;
  if (isInternalCo && !isInternalNo) phatSinhCo = trans.SO_TIEN;

  return [phatSinhNo, phatSinhCo];
}

/**
 * H√ÄM PH·ª§: L·∫•y giao d·ªãch trong k·ª≥ b√°o c√°o cho t√†i kho·∫£n cha (bao g·ªìm t√†i kho·∫£n con)
 */
function getTransactionsForParentAccount(parentAccount, childAccounts, allTransactions, ngayBatDau, ngayKetThuc) {
  return allTransactions.filter(trans => {
    const ngayGiaoDich = new Date(trans.NGAY_HT);
    const inPeriod = ngayGiaoDich >= ngayBatDau && ngayGiaoDich <= ngayKetThuc;
    
    if (!inPeriod) return false;
    
    // Giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n cha
    if (trans.TK_NO === parentAccount || trans.TK_CO === parentAccount) {
      return true;
    }
    
    // Giao d·ªãch li√™n quan ƒë·∫øn t√†i kho·∫£n con
    if (isAccountInHierarchy(trans.TK_NO, parentAccount, childAccounts) ||
        isAccountInHierarchy(trans.TK_CO, parentAccount, childAccounts)) {
      return true;
    }
    
    return false;
  }).sort((a, b) => new Date(a.NGAY_HT) - new Date(b.NGAY_HT));
}

/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω danh s√°ch giao d·ªãch th√¥, t·∫°o ra c√°c b√∫t to√°n thu·∫ø GTGT ·∫£o.
 */



/**
 * H√ÄM PH·ª§: T√≠nh to√°n s·ªë d∆∞ cu·ªëi k·ª≥ t·ª´ t·ªïng n·ª£ v√† t·ªïng c√≥.
 */
function tinhSoDu(tongNo, tongCo) {
  if (tongNo > tongCo) {
    return [tongNo - tongCo, 0];
  } else {
    return [0, tongCo - tongNo];
  }
}
/**
 * L·∫•y to√†n b·ªô danh s√°ch t√†i kho·∫£n t·ª´ DMTK ƒë·ªÉ hi·ªÉn th·ªã tr√™n sidebar.
 */
function getAccountsForSidebar() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetDMTK = ss.getSheetByName('DMTK');
    if (!sheetDMTK) return [];

    const data = sheetDMTK.getDataRange().getValues();
    const accounts = [];
    for (let i = 1; i < data.length; i++) {
      const maTK = data[i][0]?.toString().trim();
      const tenTK = data[i][1]?.toString().trim();
      if (maTK && tenTK) {
        accounts.push({ ma: maTK, ten: tenTK });
      }
    }
    return accounts.sort((a, b) => a.ma.localeCompare(b.ma));
  } catch (e) {
    console.error("L·ªói khi l·∫•y danh s√°ch t√†i kho·∫£n: " + e.toString());
    return [];
  }
}

/**
 * H√†m m·ªõi ƒë·ªÉ m·ªü sidebar Unified - B·∫£ng ƒëi·ªÅu khi·ªÉn t·ªïng h·ª£p
 */
function moSidebarUnified() {
  const html = HtmlService.createHtmlOutputFromFile('SidebarUnified')
    .setWidth(450)
    .setTitle('üöÄ B·∫£ng ƒêi·ªÅu Khi·ªÉn');
  SpreadsheetApp.getUi().showSidebar(html);
}

/**
 * H√†m m·ªõi ƒë·ªÉ m·ªü sidebar S·ªï chi ti·∫øt (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
 */
function moSidebarSoChiTiet() {
  const html = HtmlService.createHtmlOutputFromFile('sidebarSoChiTiet')
    .setWidth(400)
    .setTitle('üìñ T√πy ch·ªçn S·ªï Chi Ti·∫øt');
  SpreadsheetApp.getUi().showSidebar(html);
}

// ==================== SIDEBAR T√ÄI KHO·∫¢N - GI·∫¢I PH√ÅP 1 ====================

// H√†m m·ªü sidebar t√†i kho·∫£n (ƒë√£ ƒë∆°n gi·∫£n h√≥a)
function moSidebarTaiKhoan() {
  const html = HtmlService.createHtmlOutputFromFile('sidebarTaiKhoan') // T√™n file HTML c·ªßa b·∫°n
    .setWidth(400)
    .setTitle('üíº Ch·ªçn T√†i kho·∫£n');
  SpreadsheetApp.getUi().showSidebar(html);
}

// L·∫•y d·ªØ li·ªáu t√†i kho·∫£n cho sidebar (ƒë√£ ƒë∆°n gi·∫£n h√≥a)
function getTaiKhoanDataForSidebar() {
  // L·∫•y ra b·ªô nh·ªõ ƒë·ªám c·ªßa script
  const cache = CacheService.getScriptCache();
  const CACHE_KEY = 'DANH_SACH_TAI_KHOAN';

  // 1. Th·ª≠ l·∫•y d·ªØ li·ªáu t·ª´ cache tr∆∞·ªõc
  const cachedData = cache.get(CACHE_KEY);
  if (cachedData != null) {
    console.log('‚úÖ Loaded accounts from CACHE.');
    // N·∫øu c√≥, gi·∫£i n√©n v√† tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
    return {
      accounts: JSON.parse(cachedData)
    };
  }

  // 2. N·∫øu cache kh√¥ng c√≥, ƒë·ªçc t·ª´ Sheet nh∆∞ b√¨nh th∆∞·ªùng
  console.log('‚ö†Ô∏è Cache miss. Reading accounts from Sheet.');
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetDMTK = ss.getSheetByName('DMTK');
  
  if (!sheetDMTK) {
    throw new Error('Kh√¥ng t√¨m th·∫•y sheet DMTK');
  }
  
  try {
    const data = sheetDMTK.getDataRange().getValues();
    const accounts = [];
    
    // B·ªè qua d√≤ng ti√™u ƒë·ªÅ (i = 1)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const ma = row[0]?.toString().trim();
      const ten = row[1]?.toString().trim();
      const loai = row[2] || null;
      if (ma && ten) {
        accounts.push({ ma, ten, loai });
      }
    }
    
    accounts.sort((a, b) => a.ma.localeCompare(b.ma));
    
    // 3. L∆∞u d·ªØ li·ªáu v√†o cache cho l·∫ßn s·ª≠ d·ª•ng ti·∫øp theo
    // D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u trong 15 ph√∫t (900 gi√¢y)
    cache.put(CACHE_KEY, JSON.stringify(accounts), 900);
    console.log(`‚úÖ Loaded and cached ${accounts.length} accounts.`);
    
    return {
      accounts: accounts
    };
    
  } catch (error) {
    console.error('L·ªói l·∫•y d·ªØ li·ªáu t√†i kho·∫£n:', error.toString());
    throw new Error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t√†i kho·∫£n: ' + error.toString());
  }
}

/**
 * **S·ª¨A L·ªñI**: Ghi t√†i kho·∫£n v√†o √î ƒêANG HO·∫†T ƒê·ªòNG (ACTIVE CELL) m·ªõi nh·∫•t.
 * H√†m n√†y kh√¥ng c√≤n nh·∫≠n tham s·ªë 'context' t·ª´ sidebar n·ªØa.
 * N√≥ s·∫Ω t·ª± ƒë·ªông x√°c ƒë·ªãnh √¥ ng∆∞·ªùi d√πng ƒëang ch·ªçn v√† ghi d·ªØ li·ªáu v√†o ƒë√≥.
 */
function ghiTaiKhoanVaoCell(maTK) {
  try {
    // 1. Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!maTK || typeof maTK !== 'string' || maTK.trim() === '') {
      return { success: false, error: 'M√£ t√†i kho·∫£n kh√¥ng h·ª£p l·ªá' };
    }
    
    // 2. L·∫•y √¥ ƒëang ho·∫°t ƒë·ªông (active cell) m·ªõi nh·∫•t
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const activeCell = ss.getActiveCell();

    if (!activeCell) {
      return { 
        success: false, 
        error: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ cell. Vui l√≤ng ch·ªçn m·ªôt cell tr∆∞·ªõc.' 
      };
    }
    
    // 3. Ghi d·ªØ li·ªáu v√†o √¥
    const maTKTrimmed = maTK.trim();
    activeCell.setValue(maTKTrimmed);
    
    const cellAddress = activeCell.getA1Notation();
    const sheetName = activeCell.getSheet().getName();
    console.log(`‚úÖ Written "${maTKTrimmed}" to ${sheetName}!${cellAddress}`);
    
    // (T√πy ch·ªçn) L∆∞u t√†i kho·∫£n g·∫ßn ƒë√¢y - kh√¥ng ·∫£nh h∆∞·ªüng logic ch√≠nh
    saveRecentAccount(maTKTrimmed);

    return { success: true };

  } catch (error) {
    const errorMessage = `L·ªói h·ªá th·ªëng: ${error.toString()}`;
    console.error('‚ùå Error in ghiTaiKhoanVaoCell:', errorMessage);
    return { 
      success: false, 
      error: errorMessage 
    };
  }
}

// H√†m l∆∞u t√†i kho·∫£n g·∫ßn ƒë√¢y (gi·ªØ nguy√™n, kh√¥ng c·∫ßn s·ª≠a)
function saveRecentAccount(maTK) {
  try {
    const properties = PropertiesService.getDocumentProperties();
    let recentAccounts = [];
    const recentData = properties.getProperty('RECENT_ACCOUNTS');
    if (recentData) {
      recentAccounts = JSON.parse(recentData);
    }
    recentAccounts = recentAccounts.filter(acc => acc !== maTK);
    recentAccounts.unshift(maTK);
    if (recentAccounts.length > 10) {
      recentAccounts = recentAccounts.slice(0, 10);
    }
    properties.setProperty('RECENT_ACCOUNTS', JSON.stringify(recentAccounts));
    return true;
  } catch (error) {
    console.error('L·ªói l∆∞u recent account:', error.toString());
    return false;
  }
}

// Th√™m h√†m n√†y v√†o file .gs c·ªßa b·∫°n
function clearAccountCache() {
  CacheService.getScriptCache().remove('DANH_SACH_TAI_KHOAN');
  console.log('üßπ Account cache cleared.');
}

/**
 * H√†m l·∫•y danh s√°ch t√†i kho·∫£n g·∫ßn ƒë√¢y
 */
function getRecentAccounts() {
  try {
    const properties = PropertiesService.getDocumentProperties();
    const recentData = properties.getProperty('RECENT_ACCOUNTS');
    if (recentData) {
      return JSON.parse(recentData);
    }
    return [];
  } catch (error) {
    console.error('L·ªói l·∫•y t√†i kho·∫£n g·∫ßn ƒë√¢y:', error.toString());
    return [];
  }
}

/**
 * H√†m l∆∞u ng√†y b√°o c√°o v√†o Properties Service
 */
function saveReportDates(startDate, endDate) {
  try {
    const properties = PropertiesService.getDocumentProperties();
    const datesData = { startDate, endDate };
    properties.setProperty('REPORT_DATES', JSON.stringify(datesData));
    return true;
  } catch (error) {
    console.error('L·ªói l∆∞u ng√†y b√°o c√°o:', error.toString());
    return false;
  }
}

/**
 * H√†m l·∫•y ng√†y b√°o c√°o t·ª´ Properties Service
 */
function getReportDates() {
  try {
    const properties = PropertiesService.getDocumentProperties();
    const datesData = properties.getProperty('REPORT_DATES');
    if (datesData) {
      return JSON.parse(datesData);
    }
    return null;
  } catch (error) {
    console.error('L·ªói l·∫•y ng√†y b√°o c√°o:', error.toString());
    return null;
  }
}

/**
 * H√†m m·ªõi ƒë·ªÉ l·∫•y d·ªØ li·ªáu h√†ng h√≥a cho sidebar Unified
 */

function getHangHoaForSidebar() {
  try {
    const cache = CacheService.getScriptCache();
    const CACHE_KEY = 'DANH_SACH_HANG_HOA';
    const cachedData = cache.get(CACHE_KEY);
    
    if (cachedData != null) {
      console.log('‚úÖ Loaded products from CACHE for Unified sidebar.');
      const hangHoaList = JSON.parse(cachedData);
      // Khi t·∫£i t·ª´ cache, uniqueId ƒë√£ ƒë∆∞·ª£c ƒë·∫£m b·∫£o l√† duy nh·∫•t t·ª´ l·∫ßn l∆∞u tr∆∞·ªõc.
      return hangHoaList;
    }

    console.log('‚ö†Ô∏è Cache miss. Reading products from Sheet "DMHH" for Unified sidebar.');
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetDMHH = ss.getSheetByName('DMHH');
    if (!sheetDMHH) {
      throw new Error('Kh√¥ng t√¨m th·∫•y sheet "DMHH"');
    }

    // *** S·ª¨A ƒê·ªîI 1: Ch·ªâ l·∫•y v√πng d·ªØ li·ªáu c√≥ ch·ª©a n·ªôi dung ƒë·ªÉ tr√°nh timeout ***
    // Gi·∫£ s·ª≠ d·ªØ li·ªáu n·∫±m t·ª´ c·ªôt A ƒë·∫øn E
    const lastRow = sheetDMHH.getLastRow();
    // N·∫øu sheet ch·ªâ c√≥ header ho·∫∑c kh√¥ng c√≥ g√¨, tr·∫£ v·ªÅ m·∫£ng r·ªóng
    if (lastRow < 2) return []; 
    const data = sheetDMHH.getRange('A2:E' + lastRow).getValues();

    const hangHoaList = [];
    
    // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (ch·ªâ s·ªë 0 trong m·∫£ng data)
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const maKho = row[0]?.toString().trim();
      const maHang = row[1]?.toString().trim();
      
      if (maKho && maHang) {
        // *** S·ª¨A ƒê·ªîI 2: ƒê·∫£m b·∫£o uniqueId LU√îN LU√îN l√† duy nh·∫•t b·∫±ng c√°ch th√™m ch·ªâ s·ªë d√≤ng ***
        // Ch·ªâ s·ªë i + 2 t∆∞∆°ng ·ª©ng v·ªõi s·ªë d√≤ng th·ª±c t·∫ø tr√™n sheet
        const uniqueId = `${maKho}|${maHang}|${i + 2}`;

        const item = {
          maKho: maKho,
          maHang: maHang,
          tenHang: row[2]?.toString().trim() || '',
          quyCach: row[3]?.toString().trim() || '',
          dvt: row[4]?.toString().trim() || '',
          uniqueId: uniqueId // G√°n ID ƒë√£ ƒë∆∞·ª£c ƒë·∫£m b·∫£o duy nh·∫•t
        };
        hangHoaList.push(item);
      }
    }

    hangHoaList.sort((a, b) => a.maKho.localeCompare(b.maKho) || a.maHang.localeCompare(b.maHang));
    
    cache.put(CACHE_KEY, JSON.stringify(hangHoaList), 900); // L∆∞u v√†o cache trong 15 ph√∫t
    console.log(`‚úÖ Loaded and cached ${hangHoaList.length} products for Unified sidebar.`);

    return hangHoaList;
  } catch (e) {
    console.error('Error in getHangHoaForSidebar: ' + e.toString());
    return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
  }
}

/**
 * H√ÄM H·ªñ TR·ª¢: Ch·∫°y h√†m n√†y th·ªß c√¥ng ƒë·ªÉ x√≥a cache khi c·∫ßn ki·ªÉm tra d·ªØ li·ªáu m·ªõi.
 * 1. M·ªü tr√¨nh ch·ªânh s·ª≠a Apps Script.
 * 2. Ch·ªçn h√†m 'clearHangHoaCache' t·ª´ danh s√°ch.
 * 3. Nh·∫•n n√∫t ‚ñ∂ Run.
 */
function clearHangHoaCache() {
  CacheService.getScriptCache().remove('DANH_SACH_HANG_HOA');
  console.log('Cache h√†ng h√≥a ƒë√£ ƒë∆∞·ª£c x√≥a.');
}
/**
 * H√†m ghi h√†ng h√≥a v√†o sheet t·ª´ sidebar Unified (t∆∞∆°ng th√≠ch v·ªõi c·∫•u tr√∫c d·ªØ li·ªáu m·ªõi)
 * @param {Array<Object>} selectedItems M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng h√†ng h√≥a ƒë√£ ch·ªçn t·ª´ sidebar Unified
 */
function ghiHangHoaVaoSheet(selectedItems) {
  try {
    if (!selectedItems || selectedItems.length === 0) {
      return { success: false, error: 'Kh√¥ng c√≥ h√†ng h√≥a n√†o ƒë∆∞·ª£c ch·ªçn.' };
    }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const activeCell = ss.getActiveCell();
    const sheet = activeCell.getSheet();
    const startRow = activeCell.getRow();
    const startCol = activeCell.getColumn();
    
    // T·∫°o m·∫£ng 2 chi·ªÅu v·ªõi ƒë·∫ßy ƒë·ªß 5 th√¥ng tin
    const outputData = selectedItems.map(item => [
      item.maKho, 
      item.maHang, 
      item.tenHang, 
      item.quyCach || '', 
      item.dvt || ''      
    ]);
    
    // Ghi d·ªØ li·ªáu ra m·ªôt v√πng r·ªông 5 c·ªôt
    sheet.getRange(startRow, startCol, outputData.length, 5).setValues(outputData);

    console.log(`‚úÖ Unified Sidebar: Written ${outputData.length} items (5 columns) to ${sheet.getName()}`);
    return { success: true, count: outputData.length }; 

  } catch (e) {
    console.error('Error in ghiHangHoaVaoSheet: ' + e.toString());
    return { success: false, error: e.toString() };
  }
}

/**
 * H√†m t·∫°o b√°o c√°o Nh·∫≠p Xu·∫•t T·ªìn t·ª´ sidebar v·ªõi h√†ng h√≥a ƒë√£ ch·ªçn
 * Ho·∫°t ƒë·ªông t∆∞∆°ng t·ª± nh∆∞ taoCanDoiPhatSinh - nh·∫≠n tham s·ªë tr·ª±c ti·∫øp t·ª´ sidebar
 * @param {string} startDate Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
 * @param {string} endDate Ng√†y k·∫øt th√∫c (YYYY-MM-DD)
 * @param {Array<Object>} selectedHangHoa M·∫£ng h√†ng h√≥a ƒë√£ ch·ªçn t·ª´ sidebar
 */


function taoNhapXuatTonFromSidebar(startDate, endDate, selectedHangHoa, reportType) {
  try {
    console.log(`üöÄ B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o NXT (${reportType}) t·ª´ sidebar: ${startDate} ‚Üí ${endDate}`);
    console.log(`üì¶ S·ªë l∆∞·ª£ng h√†ng h√≥a ƒë∆∞·ª£c ch·ªçn: ${selectedHangHoa.length}`);
    
    if (!selectedHangHoa || selectedHangHoa.length === 0) {
      throw new Error('Kh√¥ng c√≥ h√†ng h√≥a n√†o ƒë∆∞·ª£c ch·ªçn');
    }
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    const sheetDMHH = ss.getSheetByName('DMHH');
    const sheetNXT = ss.getSheetByName('NXT');
    
    if (!sheetDMHH || !sheetNXT) {
      throw new Error('Kh√¥ng t√¨m th·∫•y sheet DMHH ho·∫∑c NXT');
    }
    
    const ngayBatDau = new Date(startDate + 'T00:00:00');
    const ngayKetThuc = new Date(endDate + 'T23:59:59');
    
    const selectedHangHoaKeys = selectedHangHoa.map(item => `${item.maKho}|${item.maHang}`);
    
    const result = xuLyDuLieuNhapXuatTon(sheetDMHH, sheetNXT, ngayBatDau, ngayKetThuc, selectedHangHoaKeys, reportType);
    
    console.log(`‚úÖ Ho√†n th√†nh b√°o c√°o NXT cho ${selectedHangHoa.length} h√†ng h√≥a`);
    
    return { 
      success: true, 
      message: `ƒê√£ t·∫°o b√°o c√°o NXT cho ${selectedHangHoa.length} h√†ng h√≥a`,
      data: result
    };
    
  } catch (error) {
    console.error('‚ùå L·ªói trong taoNhapXuatTonFromSidebar: ' + error.toString());
    throw new Error('L·ªói t·∫°o b√°o c√°o NXT: ' + error.toString());
  }
}

/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω d·ªØ li·ªáu Nh·∫≠p Xu·∫•t T·ªìn
 * ‚≠ê C·∫¨P NH·∫¨T: Th√™m logic l·∫•y th·ª© t·ª± g·ªëc t·ª´ DMHH
 */
function xuLyDuLieuNhapXuatTon(sheetDMHH, sheetNXT, ngayBatDau, ngayKetThuc, selectedHangHoaKeys, reportType) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dataDMHH = sheetDMHH.getDataRange().getValues();
  const headerRowDMHH = 1;
  
  const filterCondition = (row) => row.maKho && row.maHang && row.soLuong !== 0;
  const dataResult = getAllDataFromDLSheets(ss, 'NXT', filterCondition);
  const combinedData = dataResult.data;
  
  const hangHoaMap = new Map();
  const dmhhKeysInOrder = []; // M·∫£ng l∆∞u th·ª© t·ª± g·ªëc

  function kiemTraDieuKienLoc(maKho, maHang) {
    const key = `${maKho}|${maHang}`;
    return selectedHangHoaKeys.includes(key);
  }

  function phanLoaiGiaoDich(tkNo, tkCo) {
    if (tkNo.startsWith('154')) return 'XUAT_SX';
    if (tkCo.startsWith('154')) return 'NHAP';
    if (tkNo.startsWith('15')) return 'NHAP';
    if (tkCo.startsWith('15')) return 'XUAT';
    return null;
  }
  
  // B∆Ø·ªöC 1: ƒê·ªçc d·ªØ li·ªáu v√† th·ª© t·ª± t·ª´ DMHH
  for (let i = headerRowDMHH; i < dataDMHH.length; i++) {
    const row = dataDMHH[i];
    const maKho = row[0]?.toString().trim();
    const maHang = row[1]?.toString().trim();
    
    if (maKho && maHang) {
      const key = `${maKho}|${maHang}`;
      // L∆∞u l·∫°i th·ª© t·ª± c·ªßa t·∫•t c·∫£ c√°c m√£ h√†ng trong DMHH
      dmhhKeysInOrder.push(key);

      if (kiemTraDieuKienLoc(maKho, maHang)) {
        hangHoaMap.set(key, {
          maKho: maKho,
          maHang: maHang,
          tenHang: row[2]?.toString().trim(),
          quyCache: row[3]?.toString().trim(),
          dvt: row[4]?.toString().trim(),
          slDauKyGoc: parseFloat(row[5]) || 0,
          gtDauKyGoc: parseFloat(row[6]) || 0,
          slNhapTruocKy: 0, gtNhapTruocKy: 0,
          slXuatTruocKy: 0, gtXuatTruocKy: 0,
          slXuatSXTruocKy: 0, gtXuatSXTruocKy: 0,
          slNhapTrongKy: 0, gtNhapTrongKy: 0,
          slXuatTrongKy: 0, gtXuatTrongKy: 0,
          slXuatSXTrongKy: 0, gtXuatSXTrongKy: 0
        });
      }
    }
  }
  
  // B∆Ø·ªöC 2: X·ª≠ l√Ω d·ªØ li·ªáu giao d·ªãch
  for (let i = 0; i < combinedData.length; i++) {
    const row = combinedData[i];
    const key = `${row.maKho}|${row.maHang}`;
    if (!kiemTraDieuKienLoc(row.maKho, row.maHang)) continue;
    
    const loaiGiaoDich = phanLoaiGiaoDich(row.tkNo, row.tkCo);
    if (loaiGiaoDich === null) continue;
    
    if (!hangHoaMap.has(key)) {
         hangHoaMap.set(key, {
            maKho: row.maKho, maHang: row.maHang, tenHang: `H√†ng ${row.maHang}`,
            quyCache: '', dvt: '', slDauKyGoc: 0, gtDauKyGoc: 0,
            slNhapTruocKy: 0, gtNhapTruocKy: 0, slXuatTruocKy: 0, gtXuatTruocKy: 0, slXuatSXTruocKy: 0, gtXuatSXTruocKy: 0,
            slNhapTrongKy: 0, gtNhapTrongKy: 0, slXuatTrongKy: 0, gtXuatTrongKy: 0, slXuatSXTrongKy: 0, gtXuatSXTrongKy: 0
        });
    }

    const hangHoa = hangHoaMap.get(key);
    const ngayHachToan = new Date(row.ngay);
    const laTruocKy = ngayHachToan < ngayBatDau;
    
    if (laTruocKy) {
      if (loaiGiaoDich === 'NHAP') { hangHoa.slNhapTruocKy += row.soLuong; hangHoa.gtNhapTruocKy += row.soTien; }
      if (loaiGiaoDich === 'XUAT') { hangHoa.slXuatTruocKy += row.soLuong; hangHoa.gtXuatTruocKy += row.soTien; }
      if (loaiGiaoDich === 'XUAT_SX') { hangHoa.slXuatSXTruocKy += row.soLuong; hangHoa.gtXuatSXTruocKy += row.soTien; }
    } else if (ngayHachToan <= ngayKetThuc) {
      if (loaiGiaoDich === 'NHAP') { hangHoa.slNhapTrongKy += row.soLuong; hangHoa.gtNhapTrongKy += row.soTien; }
      if (loaiGiaoDich === 'XUAT') { hangHoa.slXuatTrongKy += row.soLuong; hangHoa.gtXuatTrongKy += row.soTien; }
      if (loaiGiaoDich === 'XUAT_SX') { hangHoa.slXuatSXTrongKy += row.soLuong; hangHoa.gtXuatSXTrongKy += row.soTien; }
    }
  }
  
  // B∆Ø·ªöC 3: L·ªçc h√†ng h√≥a c√≥ d·ªØ li·ªáu
  const hangHoaCoData = new Map();
  for (const [key, hangHoa] of hangHoaMap.entries()) {
    const slTonDauKy = hangHoa.slDauKyGoc + hangHoa.slNhapTruocKy - hangHoa.slXuatTruocKy - hangHoa.slXuatSXTruocKy;
    if (slTonDauKy !== 0 || hangHoa.slNhapTrongKy !== 0 || hangHoa.slXuatTrongKy !== 0 || hangHoa.slXuatSXTrongKy !== 0) {
      hangHoaCoData.set(key, hangHoa);
    }
  }
  
  // B∆Ø·ªöC 4: Ghi d·ªØ li·ªáu v√†o sheet NXT, truy·ªÅn th·ª© t·ª± g·ªëc v√†o
  ghiDuLieuVaoSheetNXT(sheetNXT, hangHoaCoData, ngayBatDau, ngayKetThuc, reportType, dmhhKeysInOrder);
  
  const thongKe = {}; 
  return thongKe;
}

/**
 * H√ÄM PH·ª§: Ghi d·ªØ li·ªáu v√†o sheet NXT
 * ‚≠ê C·∫¨P NH·∫¨T: S·ª≠ d·ª•ng th·ª© t·ª± t·ª´ DMHH thay v√¨ s·∫Øp x·∫øp l·∫°i
 */
function ghiDuLieuVaoSheetNXT(sheetNXT, hangHoaCoData, ngayBatDau, ngayKetThuc, reportType, dmhhKeysInOrder) {
  let headers1, headers2, outputColumns, mergeCellsDef;
  let numCols, numberFormatDef, dataStartRow = 6, headerRows = 2;

  const formatSL = '#,##0.00;-#,##0.00;';
  const formatGT = '#,##0;-#,##0;';

  if (reportType === 'SL') {
    numCols = 11;
    headerRows = 1;
    dataStartRow = 5;
    headers1 = ['M√£ kho', 'M√£ h√†ng', 'T√™n h√†ng', 'Quy c√°ch', 'ƒêVT', 'SL T·ªìn ƒë·∫ßu k·ª≥', 'SL Nh·∫≠p trong k·ª≥', 'SL Xu·∫•t trong k·ª≥', 'SL Xu·∫•t SX trong k·ª≥', 'SL T·ªìn cu·ªëi k·ª≥', 'Ghi ch√∫'];
    headers2 = null;
    outputColumns = item => [item.maKho, item.maHang, item.tenHang, item.quyCache, item.dvt, item.slTonDauKy, item.slNhapTrongKy, item.slXuatTrongKy, item.slXuatSXTrongKy, item.slTonCuoiKy, ''];
    mergeCellsDef = [];
    numberFormatDef = { format: formatSL, range: { col: 6, count: 5 } };
  } else if (reportType === 'GT') {
    numCols = 11;
    headerRows = 1;
    dataStartRow = 5;
    headers1 = ['M√£ kho', 'M√£ h√†ng', 'T√™n h√†ng', 'Quy c√°ch', 'ƒêVT', 'GT T·ªìn ƒë·∫ßu k·ª≥', 'GT Nh·∫≠p trong k·ª≥', 'GT Xu·∫•t trong k·ª≥', 'GT Xu·∫•t SX trong k·ª≥', 'GT T·ªìn cu·ªëi k·ª≥', 'Ghi ch√∫'];
    headers2 = null;
    outputColumns = item => [item.maKho, item.maHang, item.tenHang, item.quyCache, item.dvt, item.gtTonDauKy, item.gtNhapTrongKy, item.gtXuatTrongKy, item.gtXuatSXTrongKy, item.gtTonCuoiKy, ''];
    mergeCellsDef = [];
    numberFormatDef = { format: formatGT, range: { col: 6, count: 5 } };
  } else { // 'ALL'
    numCols = 16;
    headers1 = ['M√£ kho', 'M√£ h√†ng', 'T√™n h√†ng', 'Quy c√°ch', 'ƒêVT', 'T·ªìn ƒë·∫ßu k·ª≥', '', 'Nh·∫≠p trong k·ª≥', '', 'Xu·∫•t trong k·ª≥', '', 'Xu·∫•t SX trong k·ª≥', '', 'T·ªìn cu·ªëi k·ª≥', '', 'Ghi ch√∫'];
    headers2 = ['', '', '', '', '', 'SL', 'Ti·ªÅn', 'SL', 'Ti·ªÅn', 'SL', 'Ti·ªÅn', 'SL', 'Ti·ªÅn', 'SL', 'Ti·ªÅn', ''];
    outputColumns = item => [item.maKho, item.maHang, item.tenHang, item.quyCache, item.dvt, item.slTonDauKy, item.gtTonDauKy, item.slNhapTrongKy, item.gtNhapTrongKy, item.slXuatTrongKy, item.gtXuatTrongKy, item.slXuatSXTrongKy, item.gtXuatSXTrongKy, item.slTonCuoiKy, item.gtTonCuoiKy, ''];
    mergeCellsDef = [[4, 1, 2, 1], [4, 2, 2, 1], [4, 3, 2, 1], [4, 4, 2, 1], [4, 5, 2, 1], [4, 6, 1, 2], [4, 8, 1, 2], [4, 10, 1, 2], [4, 12, 1, 2], [4, 14, 1, 2], [4, 16, 2, 1]];
    numberFormatDef = null;
  }

  const lastRow = sheetNXT.getLastRow();
  if (lastRow >= 4) {
    sheetNXT.getRange(4, 1, lastRow - 3, sheetNXT.getMaxColumns()).clear();
  }
  
  sheetNXT.getRange(4, 1, 1, headers1.length).setValues([headers1]);
  if (headers2) {
    sheetNXT.getRange(5, 1, 1, headers2.length).setValues([headers2]);
  }

  if (mergeCellsDef.length > 0) {
    for (const [row, col, numRows, numCols] of mergeCellsDef) {
      sheetNXT.getRange(row, col, numRows, numCols).merge();
    }
  }
  
  const outputData = [];
  const processedKeys = new Set();

  // ‚≠ê THAY ƒê·ªîI: Duy·ªát theo th·ª© t·ª± c·ªßa DMHH tr∆∞·ªõc
  for (const key of dmhhKeysInOrder) {
    if (hangHoaCoData.has(key) && !processedKeys.has(key)) {
      const hangHoa = hangHoaCoData.get(key);
      const slTonDauKy = hangHoa.slDauKyGoc + hangHoa.slNhapTruocKy - hangHoa.slXuatTruocKy - hangHoa.slXuatSXTruocKy;
      const gtTonDauKy = hangHoa.gtDauKyGoc + hangHoa.gtNhapTruocKy - hangHoa.gtXuatTruocKy - hangHoa.gtXuatSXTruocKy;
      const slTonCuoiKy = slTonDauKy + hangHoa.slNhapTrongKy - hangHoa.slXuatTrongKy - hangHoa.slXuatSXTrongKy;
      const gtTonCuoiKy = gtTonDauKy + hangHoa.gtNhapTrongKy - hangHoa.gtXuatTrongKy - hangHoa.gtXuatSXTrongKy;
      
      const itemData = { ...hangHoa, slTonDauKy, gtTonDauKy, slTonCuoiKy, gtTonCuoiKy };
      outputData.push(outputColumns(itemData));
      processedKeys.add(key);
    }
  }

  // Th√™m c√°c m√£ h√†ng c√≥ ph√°t sinh nh∆∞ng kh√¥ng c√≥ trong DMHH (n·∫øu c√≥)
  for (const [key, hangHoa] of hangHoaCoData.entries()) {
    if (!processedKeys.has(key)) {
      const slTonDauKy = hangHoa.slDauKyGoc + hangHoa.slNhapTruocKy - hangHoa.slXuatTruocKy - hangHoa.slXuatSXTruocKy;
      const gtTonDauKy = hangHoa.gtDauKyGoc + hangHoa.gtNhapTruocKy - hangHoa.gtXuatTruocKy - hangHoa.gtXuatSXTruocKy;
      const slTonCuoiKy = slTonDauKy + hangHoa.slNhapTrongKy - hangHoa.slXuatTrongKy - hangHoa.slXuatSXTrongKy;
      const gtTonCuoiKy = gtTonDauKy + hangHoa.gtNhapTrongKy - hangHoa.gtXuatTrongKy - hangHoa.gtXuatSXTrongKy;
      
      const itemData = { ...hangHoa, slTonDauKy, gtTonDauKy, slTonCuoiKy, gtTonCuoiKy };
      outputData.push(outputColumns(itemData));
    }
  }
  
  if (outputData.length > 0) {
    sheetNXT.getRange(dataStartRow, 1, outputData.length, numCols).setValues(outputData);
    
    if (numberFormatDef) {
      const { format, range } = numberFormatDef;
      sheetNXT.getRange(dataStartRow, range.col, outputData.length, range.count).setNumberFormat(format);
    } else {
      const slColumns = [6, 8, 10, 12, 14];
      for (const col of slColumns) sheetNXT.getRange(dataStartRow, col, outputData.length, 1).setNumberFormat(formatSL);
      const tienColumns = [7, 9, 11, 13, 15];
      for (const col of tienColumns) sheetNXT.getRange(dataStartRow, col, outputData.length, 1).setNumberFormat(formatGT);
    }
    
    const headerRange = sheetNXT.getRange(4, 1, headerRows, numCols);
    headerRange.setBackground('#4472C4')
             .setFontColor('white')
             .setFontWeight('bold')
             .setHorizontalAlignment('center')
             .setVerticalAlignment('middle')
             .setWrap(true);
             
    const allDataRange = sheetNXT.getRange(4, 1, outputData.length + headerRows, numCols);
    allDataRange.setBorder(true, true, true, true, true, true);
  }
}
/**
 * H√ÄM PH·ª§: Cache c·∫•u tr√∫c ph√¢n c·∫•p t√†i kho·∫£n ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
 */
function getCachedAccountHierarchy() {
  try {
    const cache = CacheService.getScriptCache();
    const CACHE_KEY = 'ACCOUNT_HIERARCHY_CACHE';
    
    const cachedData = cache.get(CACHE_KEY);
    if (cachedData != null) {
      console.log('‚úÖ Loaded account hierarchy from CACHE.');
      return JSON.parse(cachedData);
    }
    
    return null;
  } catch (e) {
    console.error('L·ªói khi ƒë·ªçc cache ph√¢n c·∫•p t√†i kho·∫£n:', e.toString());
    return null;
  }
}

/**
 * H√ÄM PH·ª§: L∆∞u c·∫•u tr√∫c ph√¢n c·∫•p t√†i kho·∫£n v√†o cache
 */
function cacheAccountHierarchy(hierarchy) {
  try {
    const cache = CacheService.getScriptCache();
    const CACHE_KEY = 'ACCOUNT_HIERARCHY_CACHE';
    
    // Cache trong 30 ph√∫t (1800 gi√¢y)
    cache.put(CACHE_KEY, JSON.stringify(hierarchy), 1800);
    console.log('‚úÖ Account hierarchy cached for 30 minutes.');
  } catch (e) {
    console.error('L·ªói khi cache ph√¢n c·∫•p t√†i kho·∫£n:', e.toString());
  }
}

/**
 * H√ÄM PH·ª§: X√≥a cache ph√¢n c·∫•p t√†i kho·∫£n
 */
function clearAccountHierarchyCache() {
  try {
    CacheService.getScriptCache().remove('ACCOUNT_HIERARCHY_CACHE');
    console.log('üßπ Account hierarchy cache cleared.');
  } catch (e) {
    console.error('L·ªói khi x√≥a cache ph√¢n c·∫•p t√†i kho·∫£n:', e.toString());
  }
}

/**
 * H√ÄM PH·ª§: T·ªëi ∆∞u h√≥a vi·ªác t√¨m ki·∫øm t√†i kho·∫£n con v·ªõi index
 */
function buildAccountIndex(taiKhoanList) {
  const accountIndex = new Map();
  
  taiKhoanList.forEach(tk => {
    // T·∫°o index cho t·∫•t c·∫£ c√°c pattern c√≥ th·ªÉ
    for (let i = 1; i <= tk.ma.length; i++) {
      const pattern = tk.ma.substring(0, i);
      if (!accountIndex.has(pattern)) {
        accountIndex.set(pattern, []);
      }
      accountIndex.get(pattern).push(tk);
    }
  });
  
  return accountIndex;
}

/**
 * H√ÄM PH·ª§: T√¨m t√†i kho·∫£n con s·ª≠ d·ª•ng index (t·ªëi ∆∞u hi·ªáu su·∫•t)
 */
function findChildAccountsOptimized(parentAccount, accountIndex) {
  const children = [];
  const parentPattern = parentAccount;
  
  // S·ª≠ d·ª•ng index ƒë·ªÉ t√¨m ki·∫øm nhanh
  if (accountIndex.has(parentPattern)) {
    const potentialChildren = accountIndex.get(parentPattern);
    
    potentialChildren.forEach(acc => {
      if (acc.ma !== parentAccount && isChildAccount(parentAccount, acc.ma)) {
        children.push(acc);
      }
    });
  }
  
  return children;
}

/**
 * H√ÄM PH·ª§: Ki·ªÉm tra xem c√≥ c·∫ßn t·ªïng h·ª£p d·ªØ li·ªáu kh√¥ng
 */
function needsAggregation(parentAccount, childAccounts) {
  return childAccounts.length > 0;
}

/**
 * H√ÄM PH·ª§: T·∫°o ti√™u ƒë·ªÅ b√°o c√°o v·ªõi th√¥ng tin t·ªïng h·ª£p
 */
function createReportTitle(parentAccount, parentInfo, childAccounts) {
  let title = `S·ªî CHI TI·∫æT T√ÄI KHO·∫¢N: ${parentAccount} - ${parentInfo.ten}`;
  
  if (childAccounts.length > 0) {
    const childCodes = childAccounts.map(child => child.ma).join(', ');
    title += ` (T·ªïng h·ª£p t·ª´: ${childCodes})`;
  }
  
  return title;
}



/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω giao d·ªãch theo batch ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
 */
function processTransactionsInBatches(transactions, batchSize = 100) {
  const results = [];
  
  for (let i = 0; i < transactions.length; i += batchSize) {
    const batch = transactions.slice(i, i + batchSize);
    // X·ª≠ l√Ω batch n√†y
    batch.forEach(trans => {
      // X·ª≠ l√Ω t·ª´ng giao d·ªãch
      results.push(trans);
    });
  }
  
  return results;
}

/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - t√†i kho·∫£n c√≥ giao d·ªãch n·ªôi b·ªô (S·ª¨A L·∫†I)
 */
function handleInternalTransactions(transactions, parentAccount, childAccounts) {
  // L·ªçc b·ªè giao d·ªãch n·ªôi b·ªô gi·ªØa t√†i kho·∫£n cha v√† con ƒë·ªÉ tr√°nh t√≠nh tr√πng l·∫∑p
  return transactions.filter(trans => {
    const isInternalNo = isAccountInHierarchy(trans.TK_NO, parentAccount, childAccounts);
    const isInternalCo = isAccountInHierarchy(trans.TK_CO, parentAccount, childAccounts);
    
    // N·∫øu c·∫£ TK N·ª£ v√† TK C√≥ ƒë·ªÅu thu·ªôc h·ªá th·ªëng t√†i kho·∫£n cha-con, ƒë√¢y l√† giao d·ªãch n·ªôi b·ªô
    if (isInternalNo && isInternalCo) {
      console.log(`‚ö†Ô∏è B·ªè qua giao d·ªãch n·ªôi b·ªô: ${trans.TK_NO} -> ${trans.TK_CO} (${trans.SO_TIEN})`);
      return false; // B·ªè qua giao d·ªãch n·ªôi b·ªô
    }
    
    return true;
  });
}

/**
 * H√ÄM PH·ª§: T·∫°o b√°o c√°o chi ti·∫øt cho t·ª´ng t√†i kho·∫£n con (t√πy ch·ªçn)
 */
function createDetailedChildReport(childAccount, transactions, ngayBatDau, ngayKetThuc) {
  const childTransactions = transactions.filter(trans => {
    const ngayGiaoDich = new Date(trans.NGAY_HT);
    const inPeriod = ngayGiaoDich >= ngayBatDau && ngayGiaoDich <= ngayKetThuc;
    
    return inPeriod && (trans.TK_NO === childAccount.ma || trans.TK_CO === childAccount.ma);
  });
  
  return childTransactions.map(trans => {
    const phatSinhNo = (trans.TK_NO === childAccount.ma) ? trans.SO_TIEN : 0;
    const phatSinhCo = (trans.TK_CO === childAccount.ma) ? trans.SO_TIEN : 0;
    const tkDoiUng = (trans.TK_NO === childAccount.ma) ? trans.TK_CO : trans.TK_NO;
    
    let dienGiai = trans.DIEN_GIAI || '';
    const tenHang = trans.TEN_HANG?.toString().trim();
    const quyCach = trans.QUY_CACH?.toString().trim();
    if (tenHang) dienGiai += ` - ${tenHang}`;
    if (quyCach) dienGiai += ` (${quyCach})`;
    
    return {
      ngay: new Date(trans.NGAY_HT),
      soCT: trans.SO_CT || '',
      ngayCT: trans.NGAY_CT ? new Date(trans.NGAY_CT) : '',
      dienGiai: dienGiai,
      tkDoiUng: tkDoiUng,
      phatSinhNo: phatSinhNo,
      phatSinhCo: phatSinhCo
    };
  });
}

/**
 * H√ÄM PH·ª§: T·ªëi ∆∞u h√≥a vi·ªác x·ª≠ l√Ω giao d·ªãch l·ªõn
 */
function optimizeLargeTransactionProcessing(transactions, batchSize = 500) {
  if (transactions.length <= batchSize) {
    return transactions; // Kh√¥ng c·∫ßn x·ª≠ l√Ω batch
  }
  
  console.log(`‚ö° T·ªëi ∆∞u h√≥a x·ª≠ l√Ω ${transactions.length} giao d·ªãch v·ªõi batch size ${batchSize}`);
  
  const optimizedTransactions = [];
  for (let i = 0; i < transactions.length; i += batchSize) {
    const batch = transactions.slice(i, i + batchSize);
    optimizedTransactions.push(...batch);
    
    // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh qu√° t·∫£i
    if (i + batchSize < transactions.length) {
      Utilities.sleep(10);
    }
  }
  
  return optimizedTransactions;
}

/**
 * H√ÄM PH·ª§: T·∫°o b√°o c√°o t√≥m t·∫Øt qu√° tr√¨nh x·ª≠ l√Ω
 */
function createProcessingSummary(taiKhoanCanXem, childAccountsMap, processingTime) {
  console.log('\nüìä B√ÅO C√ÅO T√ìM T·∫ÆT QU√Å TR√åNH X·ª¨ L√ù:');
  console.log(`‚è±Ô∏è  T·ªïng th·ªùi gian x·ª≠ l√Ω: ${processingTime}ms`);
  console.log(`üìã S·ªë l∆∞·ª£ng t√†i kho·∫£n ƒë∆∞·ª£c x·ª≠ l√Ω: ${taiKhoanCanXem.length}`);
  
  let totalChildAccounts = 0;
  taiKhoanCanXem.forEach(tk => {
    const childAccounts = childAccountsMap.get(tk) || [];
    totalChildAccounts += childAccounts.length;
    
    if (childAccounts.length > 0) {
      console.log(`   - TK ${tk}: T·ªïng h·ª£p t·ª´ ${childAccounts.length} t√†i kho·∫£n con`);
    } else {
      console.log(`   - TK ${tk}: Kh√¥ng c√≥ t√†i kho·∫£n con`);
    }
  });
  
  console.log(`üìà T·ªïng s·ªë t√†i kho·∫£n con ƒë∆∞·ª£c x·ª≠ l√Ω: ${totalChildAccounts}`);
  console.log('‚úÖ Ho√†n th√†nh x·ª≠ l√Ω!\n');
}

/**
 * H√ÄM M·ªöI: T·∫°o b√°o c√°o s·ªï chi ti·∫øt t√†i kho·∫£n v·ªõi x·ª≠ l√Ω thu·∫ø t·ª´ TK_THUE
 * Phi√™n b·∫£n c·∫£i ti·∫øn v·ªõi logic x·ª≠ l√Ω thu·∫ø m·ªõi v√† t·ªïng h·ª£p theo c·∫•p t√†i kho·∫£n
 */
function taosochitiet(startDateStr, endDateStr, taiKhoanCanXem) {
  const startTime = Date.now();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  try {
    // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
    const validationErrors = validateInputData(startDateStr, endDateStr, taiKhoanCanXem);
    if (validationErrors.length > 0) {
      throw new Error('L·ªói validation: ' + validationErrors.join(', '));
    }

    const ngayBatDau = new Date(startDateStr);
    ngayBatDau.setHours(0, 0, 0, 0);
    const ngayKetThuc = new Date(endDateStr);
    ngayKetThuc.setHours(23, 59, 59, 999);
    
    console.log(`üìÖ T·∫°o b√°o c√°o s·ªï chi ti·∫øt m·ªõi cho ${taiKhoanCanXem.length} t√†i kho·∫£n t·ª´ ${ngayBatDau.toLocaleDateString('vi-VN')} ƒë·∫øn ${ngayKetThuc.toLocaleDateString('vi-VN')}`);

    // Ki·ªÉm tra sheet b√°o c√°o
    const sheetSoCT = ss.getSheetByName('SO_CT');
    if (!sheetSoCT) throw new Error('Kh√¥ng t√¨m th·∫•y sheet b√°o c√°o "SO_CT"');

    ss.toast('B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...', 'S·ªï Chi Ti·∫øt M·ªõi', -1);
    ss.toast('ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ DMTK v√† c√°c sheet DL_...', 'B∆∞·ªõc 1/5');

    // ƒê·ªçc d·ªØ li·ªáu DMTK
    const sheetDMTK = ss.getSheetByName('DMTK');
    if (!sheetDMTK) throw new Error('Kh√¥ng t√¨m th·∫•y sheet "DMTK"');
    const dataDMTK = sheetDMTK.getDataRange().getValues();
    
    // X√¢y d·ª±ng map t√†i kho·∫£n v√† c·∫•u tr√∫c ph√¢n c·∫•p
    const taiKhoanMap = new Map();
    const taiKhoanList = [];
    
    dataDMTK.slice(1).forEach(row => {
      const maTK = row[0]?.toString().trim();
      if (maTK) {
        const taiKhoanInfo = { 
          ma: maTK,
          ten: row[1]?.toString().trim(), 
          loai: parseInt(row[2]) || 0, 
          duNoGoc: parseFloat(row[3]) || 0, 
          duCoGoc: parseFloat(row[4]) || 0 
        };
        taiKhoanMap.set(maTK, taiKhoanInfo);
        taiKhoanList.push(taiKhoanInfo);
      }
    });

    // X√¢y d·ª±ng c·∫•u tr√∫c ph√¢n c·∫•p t√†i kho·∫£n
    let accountHierarchy = getCachedAccountHierarchy();
    if (!accountHierarchy) {
      accountHierarchy = buildAccountHierarchy(taiKhoanList);
      cacheAccountHierarchy(accountHierarchy);
    }
    
    // X√¢y d·ª±ng index t√†i kho·∫£n ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t t√¨m ki·∫øm
    const accountIndex = buildAccountIndex(taiKhoanList);

    ss.toast('ƒêang ƒë·ªçc d·ªØ li·ªáu ph√°t sinh...', 'B∆∞·ªõc 2/5');
    
    // ƒê·ªçc d·ªØ li·ªáu ph√°t sinh bao g·ªìm TK_THUE
    const allTransactionsRaw = readDataFromPrefixedSheetsWithThue(ss, 'DL_', ['NGAY_HT', 'TK_NO', 'TK_CO', 'SO_TIEN', 'TK_THUE', 'THUE_VAT']);
    
    ss.toast('ƒêang x·ª≠ l√Ω ph√°t sinh thu·∫ø...', 'B∆∞·ªõc 3/5');
    
    // X·ª≠ l√Ω ph√°t sinh thu·∫ø t·ª´ TK_THUE
    const allTransactions = xuLyPhatSinhThueTuTK_THUE(allTransactionsRaw);
    
    // T·ªëi ∆∞u h√≥a x·ª≠ l√Ω giao d·ªãch l·ªõn
    const optimizedTransactions = optimizeLargeTransactionProcessing(allTransactions);

    ss.toast('ƒêang t√≠nh to√°n s·ªë d∆∞ v√† ph√°t sinh...', 'B∆∞·ªõc 4/5');
    const outputData = [];
    const headers = ['Ng√†y Ghi S·ªï', 'S·ªë Ch·ª©ng T·ª´', 'Ng√†y Ch·ª©ng T·ª´', 'Di·ªÖn Gi·∫£i', 'TK ƒê·ªëi ·ª®ng', 'Ph√°t Sinh N·ª£', 'Ph√°t Sinh C√≥', 'D∆∞ N·ª£ Cu·ªëi K·ª≥', 'D∆∞ C√≥ Cu·ªëi K·ª≥'];

    for (const tk of taiKhoanCanXem) {
      if (!taiKhoanMap.has(tk)) continue;
      const tkInfo = taiKhoanMap.get(tk);

      // T√¨m t√†i kho·∫£n con c·ªßa t√†i kho·∫£n hi·ªán t·∫°i
      const childAccounts = findChildAccountsOptimized(tk, accountIndex);
      
      // T·∫°o ti√™u ƒë·ªÅ b√°o c√°o v·ªõi th√¥ng tin t·ªïng h·ª£p
      const titleRow = createReportTitle(tk, tkInfo, childAccounts);
      
      outputData.push([titleRow, '', '', '', '', '', '', '', '']);
      outputData.push(headers);

      // T√≠nh s·ªë d∆∞ ƒë·∫ßu k·ª≥ ƒë·ªông
      let [duNoDauKy, duCoDauKy] = tinhSoDuDauKyDongChoTaiKhoan(tk, childAccounts, optimizedTransactions, ngayBatDau, taiKhoanMap);
      
      outputData.push(['', '', '', 'S·ªë d∆∞ ƒë·∫ßu k·ª≥', '', '', '', duNoDauKy, duCoDauKy]);

      let duNoCuoiKy = duNoDauKy;
      let duCoCuoiKy = duCoDauKy;
      let tongPhatSinhNo = 0;
      let tongPhatSinhCo = 0;

      // L·∫•y giao d·ªãch trong k·ª≥ b√°o c√°o (bao g·ªìm t√†i kho·∫£n cha v√† con)
      const transactionsInPeriod = getTransactionsForParentAccount(tk, childAccounts, optimizedTransactions, ngayBatDau, ngayKetThuc);

      transactionsInPeriod.forEach(trans => {
        const phatSinhNo = (trans.TK_NO === tk) ? trans.SO_TIEN : 0;
        const phatSinhCo = (trans.TK_CO === tk) ? trans.SO_TIEN : 0;
        const tkDoiUng = (trans.TK_NO === tk) ? trans.TK_CO : trans.TK_NO;

        // T√≠nh to√°n ph√°t sinh t·ªïng h·ª£p t·ª´ t√†i kho·∫£n cha v√† con
        const [totalPhatSinhNo, totalPhatSinhCo] = calculateAggregatedPhatSinh(trans, tk, childAccounts);

        tongPhatSinhNo += totalPhatSinhNo;
        tongPhatSinhCo += totalPhatSinhCo;

        let finalDienGiai = trans.DIEN_GIAI || '';
        const tenHang = trans.TEN_HANG?.toString().trim();
        const quyCach = trans.QUY_CACH?.toString().trim();
        if (tenHang) finalDienGiai += ` - ${tenHang}`;
        if (quyCach) finalDienGiai += ` (${quyCach})`;

        // C·∫≠p nh·∫≠t s·ªë d∆∞ cu·ªëi k·ª≥
        let duNoMoi = duNoCuoiKy + totalPhatSinhNo;
        let duCoMoi = duCoCuoiKy + totalPhatSinhCo;
        [duNoCuoiKy, duCoCuoiKy] = tinhSoDu(duNoMoi, duCoMoi);

        outputData.push([ 
          new Date(trans.NGAY_HT), 
          trans.SO_CT || '', 
          trans.NGAY_CT ? new Date(trans.NGAY_CT) : '', 
          finalDienGiai, 
          tkDoiUng, 
          totalPhatSinhNo, 
          totalPhatSinhCo, 
          duNoCuoiKy, 
          duCoCuoiKy 
        ]);
      });

      outputData.push(['', '', '', 'C·ªông ph√°t sinh trong k·ª≥', '', tongPhatSinhNo, tongPhatSinhCo, '', '']);
      outputData.push(['', '', '', 'S·ªë d∆∞ cu·ªëi k·ª≥', '', '', '', duNoCuoiKy, duCoCuoiKy]);
      outputData.push(['', '', '', '', '', '', '', '', '']);
    }

    ss.toast('ƒêang ghi d·ªØ li·ªáu ra b√°o c√°o...', 'B∆∞·ªõc 5/5');
    if(sheetSoCT.getLastRow() >= 1) {
        sheetSoCT.clear();
    }

    if (outputData.length > 0) {
      sheetSoCT.getRange(1, 1, outputData.length, 9).setValues(outputData);
    }

    ss.toast('ƒêang ƒë·ªãnh d·∫°ng b√°o c√°o...', 'Ho√†n thi·ªán');
    for (let i = 0; i < outputData.length; i++) {
        const currentRow = i + 1;
        const rowData = outputData[i];
        const dienGiai = rowData[3]?.toString() || '';

        if (dienGiai.startsWith('S·ªî CHI TI·∫æT T√ÄI KHO·∫¢N')) {
            sheetSoCT.getRange(currentRow, 1, 1, 9).merge().setFontWeight('bold').setBackground('#c9daf8').setHorizontalAlignment('center');
        } else if (rowData[0] === 'Ng√†y Ghi S·ªï') {
            sheetSoCT.getRange(currentRow, 1, 1, 9).setFontWeight('bold').setBackground('#4a86e8').setFontColor('white');
        } else if (dienGiai.includes('S·ªë d∆∞ ƒë·∫ßu k·ª≥') || dienGiai.includes('C·ªông ph√°t sinh') || dienGiai.includes('S·ªë d∆∞ cu·ªëi k·ª≥')) {
             sheetSoCT.getRange(currentRow, 4, 1, 6).setFontWeight('bold');
        }
    }

    ss.toast('Ho√†n th√†nh!', 'Th√†nh c√¥ng', 5);
    
    // T·∫°o b√°o c√°o t√≥m t·∫Øt qu√° tr√¨nh x·ª≠ l√Ω
    const totalProcessingTime = Date.now() - startTime;
    const childAccountsMap = new Map();
    taiKhoanCanXem.forEach(tk => {
      const childAccounts = findChildAccountsOptimized(tk, accountIndex);
      childAccountsMap.set(tk, childAccounts);
    });
    createProcessingSummary(taiKhoanCanXem, childAccountsMap, totalProcessingTime);
    
  } catch (e) {
    console.error("L·ªñI T·∫†O S·ªî CHI TI·∫æT M·ªöI: " + e.toString() + e.stack);
    throw new Error('L·ªói khi t·∫°o b√°o c√°o: ' + e.toString());
  }
}

/**
 * H√ÄM PH·ª§: ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c sheet c√≥ prefix bao g·ªìm c·ªôt TK_THUE
 */
function readDataFromPrefixedSheetsWithThue(spreadsheet, sheetPrefix, requiredColumns) {
  const allSheets = spreadsheet.getSheets();
  const dataSheets = allSheets.filter(sheet => sheet.getName().startsWith(sheetPrefix));
  
  if (dataSheets.length === 0) {
    console.log(`Kh√¥ng t√¨m th·∫•y sheet n√†o b·∫Øt ƒë·∫ßu v·ªõi "${sheetPrefix}"`);
    return [];
  }

  const combinedData = [];
  for (const sheet of dataSheets) {
    const sheetData = processSingleSheetWithThue(sheet, requiredColumns);
    if (sheetData.length > 0) {
      combinedData.push(...sheetData);
    }
  }
  return combinedData;
}

/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω d·ªØ li·ªáu cho m·ªôt sheet duy nh·∫•t bao g·ªìm TK_THUE
 */
function processSingleSheetWithThue(sheet, requiredColumns) {
  try {
    const data = sheet.getDataRange().getValues();
    if (data.length <= 1) return [];

    const headerRow = data[0].map(h => h.toString().trim().toUpperCase());
    
    // T√¨m v·ªã tr√≠ c·ªßa c·ªôt NGAY_HT
    const colIndexNgayHT = headerRow.indexOf('NGAY_HT');

    // Ki·ªÉm tra xem c√≥ ƒë·ªß c√°c c·ªôt b·∫Øt bu·ªôc kh√¥ng
    const missingCols = requiredColumns.filter(col => !headerRow.includes(col));
    if (missingCols.length > 0) {
      console.error(`Sheet "${sheet.getName()}" thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: ${missingCols.join(', ')}`);
      return [];
    }

    const processedData = [];
    // L·∫∑p t·ª´ d√≤ng 2 (index = 1) ƒë·ªÉ b·ªè qua ti√™u ƒë·ªÅ
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán NGAY_HT tr∆∞·ªõc ti√™n
      const ngayHTValue = (colIndexNgayHT !== -1) ? row[colIndexNgayHT] : null;
      if (!ngayHTValue) {
        continue; // B·ªè qua d√≤ng n√†y v√† chuy·ªÉn sang d√≤ng ti·∫øp theo
      }
      
      // Th√™m validation d·ªØ li·ªáu
      if (!isValidRowDataWithThue(row, headerRow, requiredColumns)) {
        console.warn(`Sheet "${sheet.getName()}", d√≤ng ${i + 1}: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, b·ªè qua`);
        continue;
      }
      
      const rowData = {
        sheet: sheet.getName(),
        row: i + 1
      };
      
      headerRow.forEach((header, index) => {
        rowData[header] = row[index];
      });
      
      processedData.push(rowData);
    }
    return processedData;
  } catch (error) {
    console.error(`L·ªói x·ª≠ l√Ω sheet "${sheet.getName()}": ${error.toString()}`);
    return [];
  }
}

/**
 * H√ÄM PH·ª§: Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu d√≤ng bao g·ªìm TK_THUE
 */
function isValidRowDataWithThue(row, headerRow, requiredColumns) {
  try {
    for (const requiredCol of requiredColumns) {
      const colIndex = headerRow.indexOf(requiredCol);
      if (colIndex === -1) continue;
      
      const value = row[colIndex];
      
      // ƒê·ªëi v·ªõi TK_THUE v√† THUE_VAT, cho ph√©p r·ªóng (kh√¥ng b·∫Øt bu·ªôc)
      if (requiredCol === 'TK_THUE' || requiredCol === 'THUE_VAT') {
        continue;
      }
      
      if (value === null || value === undefined || value === '') {
        return false;
      }
      
      // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho c√°c c·ªôt s·ªë
      if (requiredCol === 'SO_TIEN') {
        const numValue = parseFloat(value);
        if (isNaN(numValue) || numValue <= 0) {
          return false;
        }
      }
      
      // ƒê·ªëi v·ªõi THUE_VAT, n·∫øu c√≥ gi√° tr·ªã th√¨ ph·∫£i >= 0
      if (requiredCol === 'THUE_VAT' && value !== null && value !== undefined && value !== '') {
        const numValue = parseFloat(value);
        if (isNaN(numValue) || numValue < 0) {
          return false;
        }
      }
    }
    return true;
  } catch (error) {
    console.error('L·ªói ki·ªÉm tra d·ªØ li·ªáu:', error.toString());
    return false;
  }
}

/**
 * H√ÄM PH·ª§: X·ª≠ l√Ω ph√°t sinh thu·∫ø t·ª´ c·ªôt TK_THUE
 */
function xuLyPhatSinhThueTuTK_THUE(transactionsRaw) {
  const finalTransactions = [];
  
  for (const trans of transactionsRaw) {
    const soTien = parseFloat(trans.SO_TIEN) || 0;
    const thueVAT = parseFloat(trans.THUE_VAT) || 0;
    const tkNo = trans.TK_NO?.toString().trim();
    const tkCo = trans.TK_CO?.toString().trim();
    const tkThue = trans.TK_THUE?.toString().trim();
    
    // Th√™m T·∫§T C·∫¢ giao d·ªãch g·ªëc n·∫øu c√≥ ƒë·ªß ƒëi·ªÅu ki·ªán c∆° b·∫£n
    // ƒêi·ªÅu ki·ªán: c√≥ ng√†y ghi s·ªï, t√†i kho·∫£n n·ª£, t√†i kho·∫£n c√≥, s·ªë ti·ªÅn > 0
    if (trans.NGAY_HT && tkNo && tkCo && soTien > 0) {
      finalTransactions.push({ ...trans, SO_TIEN: soTien });
    }

    // X·ª≠ l√Ω ph√°t sinh thu·∫ø t·ª´ TK_THUE (n·∫øu c√≥)
    // Ch·ªâ t·∫°o b√∫t to√°n thu·∫ø khi c√≥ thu·∫ø VAT > 0 v√† c√≥ TK_THUE
    if (thueVAT > 0 && tkThue) {
      const phatSinhThue = taoPhatSinhThue(tkThue, tkNo, tkCo, thueVAT, trans);
      if (phatSinhThue) {
        finalTransactions.push(phatSinhThue);
      }
    }
  }
  
  return finalTransactions;
}

/**
 * H√ÄM PH·ª§: T·∫°o b√∫t to√°n thu·∫ø t·ª´ TK_THUE
 */
function taoPhatSinhThue(tkThue, tkNo, tkCo, thueVAT, transGoc) {
  // Ki·ªÉm tra t√†i kho·∫£n thu·∫ø v√† t·∫°o b√∫t to√°n t∆∞∆°ng ·ª©ng
  if (tkThue === '1331' || tkThue === '1332') {
    // Ph√°t sinh N·ª¢ t√†i kho·∫£n thu·∫ø, t√†i kho·∫£n ƒë·ªëi ·ª©ng l√† TK_CO
    return {
      ...transGoc,
      TK_NO: tkThue,
      TK_CO: tkCo,
      SO_TIEN: thueVAT,
      DIEN_GIAI: `Thu·∫ø GTGT c·ªßa ${transGoc.DIEN_GIAI || 'ch·ª©ng t·ª´ ' + transGoc.SO_CT}`,
      NGAY_HT: transGoc.NGAY_HT,
      NGAY_CT: transGoc.NGAY_CT,
      SO_CT: transGoc.SO_CT
    };
  } else if (tkThue === '33311' || tkThue === '33312') {
    // Ph√°t sinh C√ì t√†i kho·∫£n thu·∫ø, t√†i kho·∫£n ƒë·ªëi ·ª©ng l√† TK_NO
    return {
      ...transGoc,
      TK_NO: tkNo,
      TK_CO: tkThue,
      SO_TIEN: thueVAT,
      DIEN_GIAI: `Thu·∫ø GTGT c·ªßa ${transGoc.DIEN_GIAI || 'ch·ª©ng t·ª´ ' + transGoc.SO_CT}`,
      NGAY_HT: transGoc.NGAY_HT,
      NGAY_CT: transGoc.NGAY_CT,
      SO_CT: transGoc.SO_CT
    };
  }
  
  // N·∫øu kh√¥ng ph·∫£i t√†i kho·∫£n thu·∫ø ƒë·∫∑c bi·ªát, tr·∫£ v·ªÅ null
  return null;
}

/**
 * ‚≠ê H√ÄM M·ªöI: T·∫°o b√°o c√°o S·ªï Nh·∫≠t K√Ω Chung
 */
function taoNhatKyChung(startDateStr, endDateStr) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  try {
    const ngayBatDau = new Date(startDateStr);
    ngayBatDau.setHours(0, 0, 0, 0);
    const ngayKetThuc = new Date(endDateStr);
    ngayKetThuc.setHours(23, 59, 59, 999);

    const sheetNKC = ss.getSheetByName('NKC');
    if (!sheetNKC) {
      throw new Error('Kh√¥ng t√¨m th·∫•y sheet b√°o c√°o "NKC". Vui l√≤ng t·∫°o sheet n√†y.');
    }

    ss.toast('ƒêang ƒë·ªçc d·ªØ li·ªáu ph√°t sinh...', 'B∆∞·ªõc 1/4');
    const dataResult = getAllDataFromDLSheets(ss, 'NKC', trans => {
      const ngayGiaoDich = new Date(trans.ngay);
      return ngayGiaoDich >= ngayBatDau && ngayGiaoDich <= ngayKetThuc;
    });
    const transactions = dataResult.data;

    ss.toast('ƒêang x·ª≠ l√Ω b√∫t to√°n...', 'B∆∞·ªõc 2/4');
    const journalEntries = [];
    let tongPsNo = 0; // ‚≠ê THAY ƒê·ªîI: Bi·∫øn t√≠nh t·ªïng N·ª£
    let tongPsCo = 0; // ‚≠ê THAY ƒê·ªîI: Bi·∫øn t√≠nh t·ªïng C√≥

    for (const trans of transactions) {
      // B√∫t to√°n ch√≠nh
      if (trans.soTien > 0) {
        journalEntries.push({
          ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
          dienGiai: trans.dienGiai || '', tkNo: trans.tkNo, tkCo: trans.tkCo, psNo: trans.soTien, psCo: 0
        });
        journalEntries.push({
          ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
          dienGiai: trans.dienGiai || '', tkNo: trans.tkCo, tkCo: trans.tkNo, psNo: 0, psCo: trans.soTien
        });
        // ‚≠ê THAY ƒê·ªîI: C·ªông d·ªìn v√†o t·ªïng
        tongPsNo += trans.soTien;
        tongPsCo += trans.soTien;
      }

      // B√∫t to√°n thu·∫ø
      if (trans.thueVAT > 0 && trans.tkThue) {
        const dienGiaiThue = `Thu·∫ø GTGT c·ªßa ${trans.dienGiai || 'CT ' + trans.soCt}`;
        if (['1331', '1332'].includes(trans.tkThue)) { // Thu·∫ø ƒë·∫ßu v√†o
          journalEntries.push({
            ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
            dienGiai: dienGiaiThue, tkNo: trans.tkThue, tkCo: trans.tkCo, psNo: trans.thueVAT, psCo: 0
          });
          journalEntries.push({
            ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
            dienGiai: dienGiaiThue, tkNo: trans.tkCo, tkCo: trans.tkThue, psNo: 0, psCo: trans.thueVAT
          });
        } else if (['33311', '33312'].includes(trans.tkThue)) { // Thu·∫ø ƒë·∫ßu ra
          journalEntries.push({
            ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
            dienGiai: dienGiaiThue, tkNo: trans.tkNo, tkCo: trans.tkThue, psNo: trans.thueVAT, psCo: 0
          });
          journalEntries.push({
            ngayGhiSo: new Date(trans.ngay), soCt: trans.soCt || '', ngayCt: trans.ngayCt ? new Date(trans.ngayCt) : '',
            dienGiai: dienGiaiThue, tkNo: trans.tkThue, tkCo: trans.tkNo, psNo: 0, psCo: trans.thueVAT
          });
        }
        // ‚≠ê THAY ƒê·ªîI: C·ªông d·ªìn v√†o t·ªïng
        tongPsNo += trans.thueVAT;
        tongPsCo += trans.thueVAT;
      }
    }

    ss.toast('ƒêang s·∫Øp x·∫øp d·ªØ li·ªáu...', 'B∆∞·ªõc 3/4');
    journalEntries.sort((a, b) => a.ngayGhiSo - b.ngayGhiSo || (a.soCt || '').localeCompare(b.soCt || ''));

    const outputData = journalEntries.map(e => [
      e.ngayGhiSo, e.soCt, e.ngayCt, e.dienGiai, e.tkNo, e.tkCo, e.psNo, e.psCo
    ]);

    ss.toast('ƒêang ghi v√† ƒë·ªãnh d·∫°ng b√°o c√°o...', 'B∆∞·ªõc 4/4');
    sheetNKC.clear();
    
    const title = `S·ªî NH·∫¨T K√ù CHUNG`;
    const subtitle = `T·ª´ ng√†y ${ngayBatDau.toLocaleDateString('vi-VN')} ƒë·∫øn ng√†y ${ngayKetThuc.toLocaleDateString('vi-VN')}`;
    sheetNKC.getRange("A1").setValue(title).setFontWeight('bold').setFontSize(14).setHorizontalAlignment('center');
    sheetNKC.getRange("A2").setValue(subtitle).setFontStyle('italic').setHorizontalAlignment('center');
    sheetNKC.getRange("A1:H1").merge();
    sheetNKC.getRange("A2:H2").merge();

    const headers = [['Ng√†y ghi s·ªï', 'S·ªë CT', 'Ng√†y CT', 'Di·ªÖn gi·∫£i', 'TK N·ª£', 'TK C√≥', 'Ph√°t sinh N·ª£', 'Ph√°t sinh C√≥']];
    sheetNKC.getRange(4, 1, 1, 8).setValues(headers).setFontWeight('bold').setBackground('#4a86e8').setFontColor('white').setHorizontalAlignment('center');
    
    if (outputData.length > 0) {
      const dataStartRow = 5;
      sheetNKC.getRange(dataStartRow, 1, outputData.length, 8).setValues(outputData);
      
      const totalRow = dataStartRow + outputData.length;
      sheetNKC.getRange(totalRow, 4).setValue('C·ªông ph√°t sinh').setFontWeight('bold').setHorizontalAlignment('right');
      // ‚≠ê THAY ƒê·ªîI: Ghi th·∫≥ng gi√° tr·ªã ƒë√£ t√≠nh to√°n, kh√¥ng d√πng c√¥ng th·ª©c
      sheetNKC.getRange(totalRow, 7).setValue(tongPsNo).setFontWeight('bold');
      sheetNKC.getRange(totalRow, 8).setValue(tongPsCo).setFontWeight('bold');
      
      const allRange = sheetNKC.getRange(4, 1, outputData.length + 1, 8);
      allRange.setBorder(true, true, true, true, true, true).setVerticalAlignment('middle');
      sheetNKC.getRange(dataStartRow, 1, outputData.length, 1).setNumberFormat("dd/MM/yyyy");
      sheetNKC.getRange(dataStartRow, 3, outputData.length, 1).setNumberFormat("dd/MM/yyyy");
      sheetNKC.getRange(dataStartRow, 7, outputData.length + 1, 2).setNumberFormat("#,##0;(#,##0);");
      sheetNKC.getRange(4, 1, outputData.length + 1, 8).setWrap(true);
      sheetNKC.autoResizeColumns(1, 8);
    }

    ss.toast('Ho√†n th√†nh!', 'Th√†nh c√¥ng', 5);
    return { success: true };

  } catch (e) {
    console.error("L·ªñI T·∫†O NH·∫¨T K√ù CHUNG: " + e.toString() + e.stack);
    throw new Error('L·ªói khi t·∫°o b√°o c√°o: ' + e.toString());
  }
}

function getInitialSidebarData() {
  try {
    // G·ªçi c√°c h√†m l·∫•y d·ªØ li·ªáu kh√°c ngay tr√™n server
    const dates = getReportDates();
    const accounts = getAccountsForSidebar();
    
    // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng duy nh·∫•t ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt khi kh·ªüi ƒë·ªông
    return {
      dates: dates,
      accounts: accounts,
    };
  } catch (e) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu kh·ªüi t·∫°o cho sidebar: " + e.toString());
    // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng l·ªói ƒë·ªÉ client c√≥ th·ªÉ x·ª≠ l√Ω
    return { error: e.toString() };
  }
}

/**
 * ‚≠ê H√ÄM M·ªöI: T·∫°o B√°o c√°o B√°n h√†ng theo ƒê∆°n h√†ng
 * C·∫¨P NH·∫¨T: S·ª≠a l·ªói "S·ªë c·ªôt kh√¥ng kh·ªõp"
 */
function taoBaoCaoBanHang(startDateStr, endDateStr, selectedDonHang) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  try {
    const ngayBatDau = new Date(startDateStr);
    ngayBatDau.setHours(0, 0, 0, 0);
    const ngayKetThuc = new Date(endDateStr);
    ngayKetThuc.setHours(23, 59, 59, 999);

    ss.toast('ƒêang ƒë·ªçc d·ªØ li·ªáu...', 'B∆∞·ªõc 1/4');
    const sheetDMDH = ss.getSheetByName('DMDONHANG');
    const sheetBCBH = ss.getSheetByName('BC_BANHANG');
    if (!sheetDMDH || !sheetBCBH) throw new Error('Kh√¥ng t√¨m th·∫•y sheet DMDONHANG ho·∫∑c BC_BANHANG');

    const allDonHangData = sheetDMDH.getDataRange().getValues();
    const allGiaoDich = getAllDataFromDLSheets(ss, 'BC_BANHANG').data;

    ss.toast('ƒêang l·ªçc v√† t√≠nh t·ªïng...', 'B∆∞·ªõc 2/4');
    const donHangCoPhatSinhTrongKy = new Set();
    let tongSoLuongToanKy = 0;
    let tongSoTienToanKy = 0;
    let tongThueToanKy = 0;

    for (const gd of allGiaoDich) {
      const ngayGiaoDich = new Date(gd.ngay);
      if (ngayGiaoDich >= ngayBatDau && ngayGiaoDich <= ngayKetThuc) {
        const key = `${gd.maKho}|${gd.maHang}`;
        donHangCoPhatSinhTrongKy.add(key);
        
        if (selectedDonHang.length === 0 || selectedDonHang.includes(key)) {
            tongSoLuongToanKy += gd.soLuong;
            tongSoTienToanKy += gd.soTien;
            tongThueToanKy += gd.thueVAT || 0;
        }
      }
    }

    ss.toast('ƒêang t·ªïng h·ª£p d·ªØ li·ªáu...', 'B∆∞·ªõc 3/4');
    const reportDataMap = new Map();
    const headerDMDH = allDonHangData[0].map(h => h.toString().trim().toUpperCase());
    
    const sizeCols = headerDMDH.map((h, i) => h.startsWith('SIZE') ? { index: i, name: h } : null).filter(Boolean);
    const slCols = headerDMDH.map((h, i) => h.startsWith('SL') ? { index: i, name: h } : null).filter(Boolean);

    for (let i = 1; i < allDonHangData.length; i++) {
      const row = allDonHangData[i];
      const maKho = row[headerDMDH.indexOf('MA_KHO')];
      const maHang = row[headerDMDH.indexOf('MA_HANG')];
      const key = `${maKho}|${maHang}`;

      const isSelected = selectedDonHang.length === 0 || selectedDonHang.includes(key);

      if (isSelected && donHangCoPhatSinhTrongKy.has(key)) {
        const donHang = {
          info: [maKho, maHang, row[headerDMDH.indexOf('TEN_HANG')], row[headerDMDH.indexOf('QUY_CACH')], row[headerDMDH.indexOf('DVT')]],
          ghiChu: row[headerDMDH.indexOf('GHI_CHU')] || '',
          soKeHoach: parseFloat(row[headerDMDH.indexOf('SO_KE_HOACH')]) || 0,
          sizes: [],
          slKeHoach: [],
          slTruocKy: [],
          slTrongKy: [],
          thanhTienTrongKy: 0,
          thueTrongKy: 0,
          sizeMap: new Map()
        };
        
        for(let j = 0; j < sizeCols.length; j++) {
            const sizeName = row[sizeCols[j].index];
            const slKeHoach = parseFloat(row[slCols[j].index]) || 0;
            if(sizeName) {
                donHang.sizes.push(sizeName);
                donHang.slKeHoach.push(slKeHoach);
                donHang.slTruocKy.push(0);
                donHang.slTrongKy.push(0);
                donHang.sizeMap.set(sizeName.toString(), j);
            }
        }
        reportDataMap.set(key, donHang);
      }
    }

    for (const gd of allGiaoDich) {
      const key = `${gd.maKho}|${gd.maHang}`;
      if (reportDataMap.has(key)) {
        const donHang = reportDataMap.get(key);
        const sizeIndex = donHang.sizeMap.get(gd.coSo.toString());
        if (sizeIndex !== undefined) {
          const ngayGiaoDich = new Date(gd.ngay);
          if (ngayGiaoDich < ngayBatDau) {
            donHang.slTruocKy[sizeIndex] += gd.soLuong;
          } else if (ngayGiaoDich <= ngayKetThuc) {
            donHang.slTrongKy[sizeIndex] += gd.soLuong;
            donHang.thanhTienTrongKy += gd.soTien;
            donHang.thueTrongKy += gd.thueVAT || 0;
          }
        }
      }
    }

    ss.toast('ƒêang ghi b√°o c√°o...', 'B∆∞·ªõc 4/4');
    sheetBCBH.clear();
    
    let maxSizes = 0;
    for (const [key, donHang] of reportDataMap.entries()) {
        if (donHang.sizes.length > maxSizes) maxSizes = donHang.sizes.length;
    }
    const maxCols = 11 + maxSizes; 

    const title = `B√ÅO C√ÅO B√ÅN H√ÄNG CHI TIET THEO ƒê∆†N H√ÄNG`;
    const subtitle = `T·ª´ ng√†y ${ngayBatDau.toLocaleDateString('vi-VN')} ƒë·∫øn ng√†y ${ngayKetThuc.toLocaleDateString('vi-VN')}`;
    sheetBCBH.getRange("A1").setValue(title).setFontWeight('bold').setFontSize(14).setHorizontalAlignment('center');
    sheetBCBH.getRange("A2").setValue(subtitle).setFontStyle('italic').setHorizontalAlignment('center');
    sheetBCBH.getRange(1, 1, 1, maxCols).merge();
    sheetBCBH.getRange(2, 1, 1, maxCols).merge();
    
    const mainHeader = [['M√£ kho', 'M√£ h√†ng', 'T√™n h√†ng', 'Quy c√°ch', 'ƒê∆°n v·ªã t√≠nh', 'Ghi Ch√∫', 'T·ªïng SL', 'ƒê∆°n Gi√°', 'Th√†nh Ti·ªÅn', 'Thu·∫ø VAT', 'T·ªïng Ti·ªÅn', 'C·ª° s·ªë']];
    sheetBCBH.getRange(4, 1, 1, 12).setValues(mainHeader);
    if (maxSizes > 1) {
      sheetBCBH.getRange(4, 12, 1, maxSizes).merge();
    }
    sheetBCBH.getRange(4, 1, 1, maxCols).setFontWeight('bold').setBackground('#4a86e8').setFontColor('white').setHorizontalAlignment('center');

    // ‚≠ê THAY ƒê·ªîI: Th√™m d√≤ng t·ªïng h·ª£p ngay d∆∞·ªõi ti√™u ƒë·ªÅ
    const tongCongTienToanKy = tongSoTienToanKy + tongThueToanKy;
    const summaryData = [['', '', 'T·ªïng ph√°t sinh trong k·ª≥:', '', '', '', tongSoLuongToanKy, '', tongSoTienToanKy, tongThueToanKy, tongCongTienToanKy]];
    const summaryRange = sheetBCBH.getRange(5, 1, 1, 11);
    summaryRange.setValues(summaryData);
    summaryRange.setFontWeight('bold');
    sheetBCBH.getRange("C5").setHorizontalAlignment('right');
    sheetBCBH.getRange(5, 7, 1, 5).setNumberFormat("#,##0;(#,##0);");


    let currentRow = 6;

    for (let i = 1; i < allDonHangData.length; i++) {
        const row = allDonHangData[i];
        const maKho = row[headerDMDH.indexOf('MA_KHO')];
        const maHang = row[headerDMDH.indexOf('MA_HANG')];
        const key = `${maKho}|${maHang}`;

        if(reportDataMap.has(key)) {
            const donHang = reportDataMap.get(key);
            const numInfoCols = donHang.info.length; // 5
            const numSizes = donHang.sizes.length;
            
            let tongSlTrongKy = donHang.slTrongKy.reduce((a, b) => a + b, 0);
            let tongSlTruocKy = donHang.slTruocKy.reduce((a, b) => a + b, 0);
            let thanhTienTrongKy = donHang.thanhTienTrongKy;
            let thueTrongKy = donHang.thueTrongKy;
            let tongTien = thanhTienTrongKy + thueTrongKy;
            let donGia = (tongSlTrongKy > 0) ? (thanhTienTrongKy / tongSlTrongKy) : 0;

            const blockData = [
                [...donHang.info, donHang.ghiChu, '', '', '', '', '', ...donHang.sizes.map(s => `#${s}`)],
                ['', '', 'SL K·∫ø ho·∫°ch', '', '', '', donHang.soKeHoach, '', '', '', '', ...donHang.slKeHoach],
                ['', '', 'SL ƒë√£ b√°o c√°o k·ª≥ tr∆∞·ªõc', '', '', '', tongSlTruocKy, '', '', '', '', ...donHang.slTruocKy],
                ['', '', 'SL ph√°t sinh k·ª≥ n√†y', '', '', '', tongSlTrongKy, donGia, thanhTienTrongKy, thueTrongKy, tongTien, ...donHang.slTrongKy]
            ];
            
            const blockTotalCols = numInfoCols + 6 + numSizes;
            sheetBCBH.getRange(currentRow, 1, 4, blockTotalCols).setValues(blockData);

            const blockRange = sheetBCBH.getRange(currentRow, 1, 4, blockTotalCols);
            blockRange.setBorder(true, true, true, true, true, true);
            sheetBCBH.getRange(currentRow, 1, 1, numInfoCols + 1).setFontWeight('bold');
            sheetBCBH.getRange(currentRow, numInfoCols + 7, 1, numSizes).setFontWeight('bold').setHorizontalAlignment('center');
            sheetBCBH.getRange(currentRow + 1, 3, 3, 1).setFontWeight('bold').setHorizontalAlignment('right');
            
            const slFormat = "#,##0;(#,##0);";
            const tienFormat = "#,##0;(#,##0);";
            
            sheetBCBH.getRange(currentRow + 1, 7, 1, 1).setNumberFormat(slFormat);
            sheetBCBH.getRange(currentRow + 1, 12, 1, numSizes).setNumberFormat(slFormat);
            
            sheetBCBH.getRange(currentRow + 2, 7, 1, 1).setNumberFormat(slFormat);
            sheetBCBH.getRange(currentRow + 2, 12, 1, numSizes).setNumberFormat(slFormat);

            sheetBCBH.getRange(currentRow + 3, 7, 1, 1).setNumberFormat(slFormat);
            sheetBCBH.getRange(currentRow + 3, 8, 1, 4).setNumberFormat(tienFormat);
            sheetBCBH.getRange(currentRow + 3, 12, 1, numSizes).setNumberFormat(slFormat);
            
            currentRow += 5;
        }
    }
    
    if (maxCols > 8) {
      sheetBCBH.autoResizeColumns(1, maxCols);
    }

    ss.toast('Ho√†n th√†nh!', 'Th√†nh c√¥ng', 5);
    return { success: true };

  } catch (e) {
    console.error("L·ªñI T·∫†O B√ÅO C√ÅO B√ÅN H√ÄNG: " + e.toString() + e.stack);
    throw new Error('L·ªói khi t·∫°o b√°o c√°o: ' + e.toString());
  }
}

/**
 * ‚≠ê H√ÄM M·ªöI: L·∫•y danh s√°ch ƒë∆°n h√†ng cho sidebar
 */
function getDonHangForSidebar() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheetDMDH = ss.getSheetByName('DMDONHANG');
    if (!sheetDMDH) return [];

    const data = sheetDMDH.getDataRange().getValues();
    const donHangList = [];
    const header = data[0].map(h => h.toString().trim().toUpperCase());
    const maKhoIndex = header.indexOf('MA_KHO');
    const maHangIndex = header.indexOf('MA_HANG');
    const tenHangIndex = header.indexOf('TEN_HANG');

    for (let i = 1; i < data.length; i++) {
      const maKho = data[i][maKhoIndex];
      const maHang = data[i][maHangIndex];
      if (maKho && maHang) {
        donHangList.push({ 
          id: `${maKho}|${maHang}`, 
          ten: data[i][tenHangIndex] || `${maKho} - ${maHang}`
        });
      }
    }
    return donHangList;
  } catch (e) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng: " + e.toString());
    return [];
  }
}

